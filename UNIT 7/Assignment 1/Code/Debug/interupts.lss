
interupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000001ec  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000025e  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <wait_ms>:
#define RESET_BIT(ADDRESS,BIT) (ADDRESS &= (~(1<<BIT)))
#define TOGGLE_BIT(ADDRESS,BIT) (ADDRESS ^= (1<<BIT))
#define READ_BIT(ADDRESS,BIT) ( ( ADDRESS & (1<<BIT) )>>BIT) )

void wait_ms(unsigned char time)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <wait_ms+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <wait_ms+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	8d 83       	std	Y+5, r24	; 0x05
	unsigned int i , j;
	for(i = 0 ; i < time ; i++)
  7c:	1c 82       	std	Y+4, r1	; 0x04
  7e:	1b 82       	std	Y+3, r1	; 0x03
  80:	13 c0       	rjmp	.+38     	; 0xa8 <wait_ms+0x3c>
		for(j = 0 ; j < 10000 ; j++);
  82:	1a 82       	std	Y+2, r1	; 0x02
  84:	19 82       	std	Y+1, r1	; 0x01
  86:	05 c0       	rjmp	.+10     	; 0x92 <wait_ms+0x26>
  88:	89 81       	ldd	r24, Y+1	; 0x01
  8a:	9a 81       	ldd	r25, Y+2	; 0x02
  8c:	01 96       	adiw	r24, 0x01	; 1
  8e:	9a 83       	std	Y+2, r25	; 0x02
  90:	89 83       	std	Y+1, r24	; 0x01
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	9a 81       	ldd	r25, Y+2	; 0x02
  96:	27 e2       	ldi	r18, 0x27	; 39
  98:	80 31       	cpi	r24, 0x10	; 16
  9a:	92 07       	cpc	r25, r18
  9c:	a8 f3       	brcs	.-22     	; 0x88 <wait_ms+0x1c>
#define READ_BIT(ADDRESS,BIT) ( ( ADDRESS & (1<<BIT) )>>BIT) )

void wait_ms(unsigned char time)
{
	unsigned int i , j;
	for(i = 0 ; i < time ; i++)
  9e:	8b 81       	ldd	r24, Y+3	; 0x03
  a0:	9c 81       	ldd	r25, Y+4	; 0x04
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	9c 83       	std	Y+4, r25	; 0x04
  a6:	8b 83       	std	Y+3, r24	; 0x03
  a8:	8d 81       	ldd	r24, Y+5	; 0x05
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	8b 81       	ldd	r24, Y+3	; 0x03
  b0:	9c 81       	ldd	r25, Y+4	; 0x04
  b2:	82 17       	cp	r24, r18
  b4:	93 07       	cpc	r25, r19
  b6:	28 f3       	brcs	.-54     	; 0x82 <wait_ms+0x16>
		for(j = 0 ; j < 10000 ; j++);
}
  b8:	0f 90       	pop	r0
  ba:	0f 90       	pop	r0
  bc:	0f 90       	pop	r0
  be:	0f 90       	pop	r0
  c0:	0f 90       	pop	r0
  c2:	cf 91       	pop	r28
  c4:	df 91       	pop	r29
  c6:	08 95       	ret

000000c8 <main>:

int main()
{
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62

	DDRD |= 0b11110000;
  d0:	a1 e3       	ldi	r26, 0x31	; 49
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	e1 e3       	ldi	r30, 0x31	; 49
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 6f       	ori	r24, 0xF0	; 240
  dc:	8c 93       	st	X, r24
	while(1)
	{
		PORTD = 0b10000000;
  de:	e2 e3       	ldi	r30, 0x32	; 50
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	80 83       	st	Z, r24
		wait_ms(20);
  e6:	84 e1       	ldi	r24, 0x14	; 20
  e8:	0e 94 36 00 	call	0x6c	; 0x6c <wait_ms>
		PORTD = 0b01000000;
  ec:	e2 e3       	ldi	r30, 0x32	; 50
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 e4       	ldi	r24, 0x40	; 64
  f2:	80 83       	st	Z, r24
		wait_ms(20);
  f4:	84 e1       	ldi	r24, 0x14	; 20
  f6:	0e 94 36 00 	call	0x6c	; 0x6c <wait_ms>
		PORTD = 0b00100000;
  fa:	e2 e3       	ldi	r30, 0x32	; 50
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 e2       	ldi	r24, 0x20	; 32
 100:	80 83       	st	Z, r24
		wait_ms(20);
 102:	84 e1       	ldi	r24, 0x14	; 20
 104:	0e 94 36 00 	call	0x6c	; 0x6c <wait_ms>
		PORTD = 0b00010000;
 108:	e2 e3       	ldi	r30, 0x32	; 50
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 e1       	ldi	r24, 0x10	; 16
 10e:	80 83       	st	Z, r24
		wait_ms(20);
 110:	84 e1       	ldi	r24, 0x14	; 20
 112:	0e 94 36 00 	call	0x6c	; 0x6c <wait_ms>
 116:	e3 cf       	rjmp	.-58     	; 0xde <main+0x16>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
