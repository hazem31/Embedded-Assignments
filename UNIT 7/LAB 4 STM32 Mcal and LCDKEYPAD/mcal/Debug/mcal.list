
mcal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a7c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000bac  08000bac  00010bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bd8  08000bd8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08000bd8  08000bd8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bd8  08000bd8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bd8  08000bd8  00010bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bdc  08000bdc  00010bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000010  08000bf0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000bf0  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c32  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000084b  00000000  00000000  00022c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000158  00000000  00000000  000234b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000110  00000000  00000000  00023610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001ffc  00000000  00000000  00023720  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001855  00000000  00000000  0002571c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00007aed  00000000  00000000  00026f71  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002ea5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000414  00000000  00000000  0002eadc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b94 	.word	0x08000b94

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08000b94 	.word	0x08000b94

08000170 <Get_CRLH_Position>:

#include "Stm32_F103C6_gpio_driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d042      	beq.n	8000206 <Get_CRLH_Position+0x96>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <Get_CRLH_Position+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d036      	beq.n	80001f6 <Get_CRLH_Position+0x86>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <Get_CRLH_Position+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02e      	beq.n	80001ee <Get_CRLH_Position+0x7e>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d02e      	beq.n	80001f2 <Get_CRLH_Position+0x82>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <Get_CRLH_Position+0x7a>
 8000198:	e047      	b.n	800022a <Get_CRLH_Position+0xba>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d02f      	beq.n	80001fe <Get_CRLH_Position+0x8e>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d02f      	beq.n	8000202 <Get_CRLH_Position+0x92>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d029      	beq.n	80001fa <Get_CRLH_Position+0x8a>
 80001a6:	e040      	b.n	800022a <Get_CRLH_Position+0xba>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d033      	beq.n	8000216 <Get_CRLH_Position+0xa6>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <Get_CRLH_Position+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d029      	beq.n	800020e <Get_CRLH_Position+0x9e>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d028      	beq.n	8000212 <Get_CRLH_Position+0xa2>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d021      	beq.n	800020a <Get_CRLH_Position+0x9a>
 80001c6:	e030      	b.n	800022a <Get_CRLH_Position+0xba>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d027      	beq.n	800021e <Get_CRLH_Position+0xae>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <Get_CRLH_Position+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d01f      	beq.n	800021a <Get_CRLH_Position+0xaa>
 80001da:	e026      	b.n	800022a <Get_CRLH_Position+0xba>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d01f      	beq.n	8000222 <Get_CRLH_Position+0xb2>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d01e      	beq.n	8000226 <Get_CRLH_Position+0xb6>
 80001e8:	e01f      	b.n	800022a <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 80001ea:	2300      	movs	r3, #0
 80001ec:	e01e      	b.n	800022c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 80001ee:	2304      	movs	r3, #4
 80001f0:	e01c      	b.n	800022c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2:
		return 8 ;
 80001f2:	2308      	movs	r3, #8
 80001f4:	e01a      	b.n	800022c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3:
		return 12 ;
 80001f6:	230c      	movs	r3, #12
 80001f8:	e018      	b.n	800022c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 80001fa:	2310      	movs	r3, #16
 80001fc:	e016      	b.n	800022c <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 80001fe:	2314      	movs	r3, #20
 8000200:	e014      	b.n	800022c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 8000202:	2318      	movs	r3, #24
 8000204:	e012      	b.n	800022c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 8000206:	231c      	movs	r3, #28
 8000208:	e010      	b.n	800022c <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_8:
		return 0 ;
 800020a:	2300      	movs	r3, #0
 800020c:	e00e      	b.n	800022c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 800020e:	2304      	movs	r3, #4
 8000210:	e00c      	b.n	800022c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 8000212:	2308      	movs	r3, #8
 8000214:	e00a      	b.n	800022c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 8000216:	230c      	movs	r3, #12
 8000218:	e008      	b.n	800022c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 800021a:	2310      	movs	r3, #16
 800021c:	e006      	b.n	800022c <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 800021e:	2314      	movs	r3, #20
 8000220:	e004      	b.n	800022c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 8000222:	2318      	movs	r3, #24
 8000224:	e002      	b.n	800022c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 8000226:	231c      	movs	r3, #28
 8000228:	e000      	b.n	800022c <Get_CRLH_Position+0xbc>



	}

	return 0 ;
 800022a:	2300      	movs	r3, #0
}
 800022c:	4618      	mov	r0, r3
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <MCAL_GPIO_Init>:
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig)
{
 8000236:	b590      	push	{r4, r7, lr}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
 800023e:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL ;
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0 ;
 8000244:	2300      	movs	r3, #0
 8000246:	73fb      	strb	r3, [r7, #15]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 )?  &GPIOx->CRL : &GPIOx->CRH ;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	2bff      	cmp	r3, #255	; 0xff
 800024e:	d801      	bhi.n	8000254 <MCAL_GPIO_Init+0x1e>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	e001      	b.n	8000258 <MCAL_GPIO_Init+0x22>
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3304      	adds	r3, #4
 8000258:	60bb      	str	r3, [r7, #8]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	4618      	mov	r0, r3
 8000260:	f7ff ff86 	bl	8000170 <Get_CRLH_Position>
 8000264:	4603      	mov	r3, r0
 8000266:	461a      	mov	r2, r3
 8000268:	230f      	movs	r3, #15
 800026a:	4093      	lsls	r3, r2
 800026c:	43da      	mvns	r2, r3
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	401a      	ands	r2, r3
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if (  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	789b      	ldrb	r3, [r3, #2]
 800027c:	2b07      	cmp	r3, #7
 800027e:	d00b      	beq.n	8000298 <MCAL_GPIO_Init+0x62>
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	789b      	ldrb	r3, [r3, #2]
 8000284:	2b06      	cmp	r3, #6
 8000286:	d007      	beq.n	8000298 <MCAL_GPIO_Init+0x62>
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	789b      	ldrb	r3, [r3, #2]
 800028c:	2b05      	cmp	r3, #5
 800028e:	d003      	beq.n	8000298 <MCAL_GPIO_Init+0x62>
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	789b      	ldrb	r3, [r3, #2]
 8000294:	2b04      	cmp	r3, #4
 8000296:	d10e      	bne.n	80002b6 <MCAL_GPIO_Init+0x80>
	{
		//Set  CNF8[1:0] MODE8[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f ) ;
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	789b      	ldrb	r3, [r3, #2]
 800029c:	3b04      	subs	r3, #4
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	b25a      	sxtb	r2, r3
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	78db      	ldrb	r3, [r3, #3]
 80002a6:	b25b      	sxtb	r3, r3
 80002a8:	4313      	orrs	r3, r2
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	f003 030f 	and.w	r3, r3, #15
 80002b2:	73fb      	strb	r3, [r7, #15]
 80002b4:	e02c      	b.n	8000310 <MCAL_GPIO_Init+0xda>

	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) ||  (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	789b      	ldrb	r3, [r3, #2]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d003      	beq.n	80002c6 <MCAL_GPIO_Init+0x90>
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	789b      	ldrb	r3, [r3, #2]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d107      	bne.n	80002d6 <MCAL_GPIO_Init+0xa0>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((PinConfig->GPIO_MODE  ) << 2) | 0x0) & 0x0f ) ;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	789b      	ldrb	r3, [r3, #2]
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	f003 030f 	and.w	r3, r3, #15
 80002d2:	73fb      	strb	r3, [r7, #15]
 80002d4:	e01c      	b.n	8000310 <MCAL_GPIO_Init+0xda>

		}else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	789b      	ldrb	r3, [r3, #2]
 80002da:	2b08      	cmp	r3, #8
 80002dc:	d102      	bne.n	80002e4 <MCAL_GPIO_Init+0xae>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO  ) << 2) | 0x0) & 0x0f ) ;
 80002de:	2304      	movs	r3, #4
 80002e0:	73fb      	strb	r3, [r7, #15]
 80002e2:	e015      	b.n	8000310 <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU  ) << 2) | 0x0) & 0x0f ) ;
 80002e4:	2308      	movs	r3, #8
 80002e6:	73fb      	strb	r3, [r7, #15]

			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	789b      	ldrb	r3, [r3, #2]
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d107      	bne.n	8000300 <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	683a      	ldr	r2, [r7, #0]
 80002f6:	8812      	ldrh	r2, [r2, #0]
 80002f8:	431a      	orrs	r2, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	e007      	b.n	8000310 <MCAL_GPIO_Init+0xda>

			}else
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	683a      	ldr	r2, [r7, #0]
 8000306:	8812      	ldrh	r2, [r2, #0]
 8000308:	43d2      	mvns	r2, r2
 800030a:	401a      	ands	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	60da      	str	r2, [r3, #12]

		}

	}
// write on the CRL or CRH
	(*configregister) |=  ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)   );
 8000310:	7bfc      	ldrb	r4, [r7, #15]
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	881b      	ldrh	r3, [r3, #0]
 8000316:	4618      	mov	r0, r3
 8000318:	f7ff ff2a 	bl	8000170 <Get_CRLH_Position>
 800031c:	4603      	mov	r3, r0
 800031e:	fa04 f203 	lsl.w	r2, r4, r3
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	431a      	orrs	r2, r3
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	601a      	str	r2, [r3, #0]

}
 800032c:	bf00      	nop
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	bd90      	pop	{r4, r7, pc}

08000334 <MCAL_GPIO_ReadPin>:
 * @param [in] 	-PinNumber: Set Pin Number according @ref GPIO_PINS_define
 * @retval 		-the input pin value (two values based on @ref GPIO_PIN_state )
 * Note			-none
 */
uint8_t MCAL_GPIO_ReadPin (GPIO_TypeDef *GPIOx,uint16_t PinNumber )
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus ;
	if (((GPIOx->IDR) & PinNumber ) !=  (uint32_t)GPIO_PIN_RESET )
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689a      	ldr	r2, [r3, #8]
 8000344:	887b      	ldrh	r3, [r7, #2]
 8000346:	4013      	ands	r3, r2
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitstatus = GPIO_PIN_SET ;
 800034c:	2301      	movs	r3, #1
 800034e:	73fb      	strb	r3, [r7, #15]
 8000350:	e001      	b.n	8000356 <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitstatus = GPIO_PIN_RESET ;
 8000352:	2300      	movs	r3, #0
 8000354:	73fb      	strb	r3, [r7, #15]
	}
return  bitstatus ;
 8000356:	7bfb      	ldrb	r3, [r7, #15]
}
 8000358:	4618      	mov	r0, r3
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr

08000362 <MCAL_GPIO_WritePin>:
 *@param [in] 			-Value: Pin Value
 * @retval 			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOx,uint16_t PinNumber , uint8_t Value)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	460b      	mov	r3, r1
 800036c:	807b      	strh	r3, [r7, #2]
 800036e:	4613      	mov	r3, r2
 8000370:	707b      	strb	r3, [r7, #1]
	if ( Value !=  GPIO_PIN_RESET )
 8000372:	787b      	ldrb	r3, [r7, #1]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d003      	beq.n	8000380 <MCAL_GPIO_WritePin+0x1e>
//		or
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber ;
 8000378:	887a      	ldrh	r2, [r7, #2]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	611a      	str	r2, [r3, #16]
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber ;
	}

}
 800037e:	e002      	b.n	8000386 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber ;
 8000380:	887a      	ldrh	r2, [r7, #2]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	615a      	str	r2, [r3, #20]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <MCAL_GPIO_WritePort>:
 * @param [in] 			-GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePort (GPIO_TypeDef *GPIOx , uint16_t Value)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	460b      	mov	r3, r1
 800039a:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value ;
 800039c:	887a      	ldrh	r2, [r7, #2]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	60da      	str	r2, [r3, #12]
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr

080003ac <Keypad_init>:
	for (i = 0; i < time; i++)
		for (j = 0; j < 255; j++)
			;
}

void Keypad_init() {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t PinConfig;

	PinConfig.GPIO_PinNumber = R0;
 80003b2:	2301      	movs	r3, #1
 80003b4:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_PU;
 80003b6:	2302      	movs	r3, #2
 80003b8:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4619      	mov	r1, r3
 80003be:	4827      	ldr	r0, [pc, #156]	; (800045c <Keypad_init+0xb0>)
 80003c0:	f7ff ff39 	bl	8000236 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = R1;
 80003c4:	2302      	movs	r3, #2
 80003c6:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_PU;
 80003c8:	2302      	movs	r3, #2
 80003ca:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	4619      	mov	r1, r3
 80003d0:	4822      	ldr	r0, [pc, #136]	; (800045c <Keypad_init+0xb0>)
 80003d2:	f7ff ff30 	bl	8000236 <MCAL_GPIO_Init>


	PinConfig.GPIO_PinNumber = R2;
 80003d6:	2308      	movs	r3, #8
 80003d8:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_PU;
 80003da:	2302      	movs	r3, #2
 80003dc:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4619      	mov	r1, r3
 80003e2:	481e      	ldr	r0, [pc, #120]	; (800045c <Keypad_init+0xb0>)
 80003e4:	f7ff ff27 	bl	8000236 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = R3;
 80003e8:	2310      	movs	r3, #16
 80003ea:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_PU;
 80003ec:	2302      	movs	r3, #2
 80003ee:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	4619      	mov	r1, r3
 80003f4:	4819      	ldr	r0, [pc, #100]	; (800045c <Keypad_init+0xb0>)
 80003f6:	f7ff ff1e 	bl	8000236 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = C0;
 80003fa:	2320      	movs	r3, #32
 80003fc:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003fe:	2304      	movs	r3, #4
 8000400:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000402:	2301      	movs	r3, #1
 8000404:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4619      	mov	r1, r3
 800040a:	4814      	ldr	r0, [pc, #80]	; (800045c <Keypad_init+0xb0>)
 800040c:	f7ff ff13 	bl	8000236 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = C1;
 8000410:	2340      	movs	r3, #64	; 0x40
 8000412:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000414:	2304      	movs	r3, #4
 8000416:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000418:	2301      	movs	r3, #1
 800041a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	4619      	mov	r1, r3
 8000420:	480e      	ldr	r0, [pc, #56]	; (800045c <Keypad_init+0xb0>)
 8000422:	f7ff ff08 	bl	8000236 <MCAL_GPIO_Init>


	PinConfig.GPIO_PinNumber = C2;
 8000426:	2380      	movs	r3, #128	; 0x80
 8000428:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800042a:	2304      	movs	r3, #4
 800042c:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 800042e:	2301      	movs	r3, #1
 8000430:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	4619      	mov	r1, r3
 8000436:	4809      	ldr	r0, [pc, #36]	; (800045c <Keypad_init+0xb0>)
 8000438:	f7ff fefd 	bl	8000236 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = C3;
 800043c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000440:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000442:	2304      	movs	r3, #4
 8000444:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000446:	2301      	movs	r3, #1
 8000448:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	4619      	mov	r1, r3
 800044e:	4803      	ldr	r0, [pc, #12]	; (800045c <Keypad_init+0xb0>)
 8000450:	f7ff fef1 	bl	8000236 <MCAL_GPIO_Init>


}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40010c00 	.word	0x40010c00

08000460 <Keypad_getkey>:


char Keypad_getkey() {
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
	uint8_t i,j ;

	for(i = 0 ; i < NROWS ; i++)
 8000466:	2300      	movs	r3, #0
 8000468:	71fb      	strb	r3, [r7, #7]
 800046a:	e0a6      	b.n	80005ba <Keypad_getkey+0x15a>
	{
		MCAL_GPIO_WritePin(KEYPAD_PORT, C0 , GPIO_PIN_SET);
 800046c:	2201      	movs	r2, #1
 800046e:	2120      	movs	r1, #32
 8000470:	4856      	ldr	r0, [pc, #344]	; (80005cc <Keypad_getkey+0x16c>)
 8000472:	f7ff ff76 	bl	8000362 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, C1 , GPIO_PIN_SET);
 8000476:	2201      	movs	r2, #1
 8000478:	2140      	movs	r1, #64	; 0x40
 800047a:	4854      	ldr	r0, [pc, #336]	; (80005cc <Keypad_getkey+0x16c>)
 800047c:	f7ff ff71 	bl	8000362 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, C2 , GPIO_PIN_SET);
 8000480:	2201      	movs	r2, #1
 8000482:	2180      	movs	r1, #128	; 0x80
 8000484:	4851      	ldr	r0, [pc, #324]	; (80005cc <Keypad_getkey+0x16c>)
 8000486:	f7ff ff6c 	bl	8000362 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, C3 , GPIO_PIN_SET);
 800048a:	2201      	movs	r2, #1
 800048c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000490:	484e      	ldr	r0, [pc, #312]	; (80005cc <Keypad_getkey+0x16c>)
 8000492:	f7ff ff66 	bl	8000362 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i] , GPIO_PIN_RESET);
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	4a4d      	ldr	r2, [pc, #308]	; (80005d0 <Keypad_getkey+0x170>)
 800049a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800049e:	2200      	movs	r2, #0
 80004a0:	4619      	mov	r1, r3
 80004a2:	484a      	ldr	r0, [pc, #296]	; (80005cc <Keypad_getkey+0x16c>)
 80004a4:	f7ff ff5d 	bl	8000362 <MCAL_GPIO_WritePin>
		for( j = 0 ; j < NCOLS ; j++)
 80004a8:	2300      	movs	r3, #0
 80004aa:	71bb      	strb	r3, [r7, #6]
 80004ac:	e07e      	b.n	80005ac <Keypad_getkey+0x14c>
		{
			if(MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0)
 80004ae:	79bb      	ldrb	r3, [r7, #6]
 80004b0:	4a48      	ldr	r2, [pc, #288]	; (80005d4 <Keypad_getkey+0x174>)
 80004b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004b6:	4619      	mov	r1, r3
 80004b8:	4844      	ldr	r0, [pc, #272]	; (80005cc <Keypad_getkey+0x16c>)
 80004ba:	f7ff ff3b 	bl	8000334 <MCAL_GPIO_ReadPin>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d170      	bne.n	80005a6 <Keypad_getkey+0x146>
			{
				while (MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0);
 80004c4:	bf00      	nop
 80004c6:	79bb      	ldrb	r3, [r7, #6]
 80004c8:	4a42      	ldr	r2, [pc, #264]	; (80005d4 <Keypad_getkey+0x174>)
 80004ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ce:	4619      	mov	r1, r3
 80004d0:	483e      	ldr	r0, [pc, #248]	; (80005cc <Keypad_getkey+0x16c>)
 80004d2:	f7ff ff2f 	bl	8000334 <MCAL_GPIO_ReadPin>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0f4      	beq.n	80004c6 <Keypad_getkey+0x66>
				switch (i) {
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	2b03      	cmp	r3, #3
 80004e0:	d861      	bhi.n	80005a6 <Keypad_getkey+0x146>
 80004e2:	a201      	add	r2, pc, #4	; (adr r2, 80004e8 <Keypad_getkey+0x88>)
 80004e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e8:	080004f9 	.word	0x080004f9
 80004ec:	08000521 	.word	0x08000521
 80004f0:	08000549 	.word	0x08000549
 80004f4:	08000571 	.word	0x08000571
								case (0):
									if (j == 0)
 80004f8:	79bb      	ldrb	r3, [r7, #6]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d101      	bne.n	8000502 <Keypad_getkey+0xa2>
										return '7';
 80004fe:	2337      	movs	r3, #55	; 0x37
 8000500:	e060      	b.n	80005c4 <Keypad_getkey+0x164>
									else if (j == 1)
 8000502:	79bb      	ldrb	r3, [r7, #6]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d101      	bne.n	800050c <Keypad_getkey+0xac>
										return '4';
 8000508:	2334      	movs	r3, #52	; 0x34
 800050a:	e05b      	b.n	80005c4 <Keypad_getkey+0x164>
									else if (j == 2)
 800050c:	79bb      	ldrb	r3, [r7, #6]
 800050e:	2b02      	cmp	r3, #2
 8000510:	d101      	bne.n	8000516 <Keypad_getkey+0xb6>
										return '1';
 8000512:	2331      	movs	r3, #49	; 0x31
 8000514:	e056      	b.n	80005c4 <Keypad_getkey+0x164>
									else if (j == 3)
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	2b03      	cmp	r3, #3
 800051a:	d13d      	bne.n	8000598 <Keypad_getkey+0x138>
										return '?';
 800051c:	233f      	movs	r3, #63	; 0x3f
 800051e:	e051      	b.n	80005c4 <Keypad_getkey+0x164>
									break;
								case (1):
									if (j == 0)
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d101      	bne.n	800052a <Keypad_getkey+0xca>
										return '8';
 8000526:	2338      	movs	r3, #56	; 0x38
 8000528:	e04c      	b.n	80005c4 <Keypad_getkey+0x164>
									else if (j == 1)
 800052a:	79bb      	ldrb	r3, [r7, #6]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d101      	bne.n	8000534 <Keypad_getkey+0xd4>
										return '5';
 8000530:	2335      	movs	r3, #53	; 0x35
 8000532:	e047      	b.n	80005c4 <Keypad_getkey+0x164>
									else if (j == 2)
 8000534:	79bb      	ldrb	r3, [r7, #6]
 8000536:	2b02      	cmp	r3, #2
 8000538:	d101      	bne.n	800053e <Keypad_getkey+0xde>
										return '2';
 800053a:	2332      	movs	r3, #50	; 0x32
 800053c:	e042      	b.n	80005c4 <Keypad_getkey+0x164>
									else if (j == 3)
 800053e:	79bb      	ldrb	r3, [r7, #6]
 8000540:	2b03      	cmp	r3, #3
 8000542:	d12b      	bne.n	800059c <Keypad_getkey+0x13c>
										return '0';
 8000544:	2330      	movs	r3, #48	; 0x30
 8000546:	e03d      	b.n	80005c4 <Keypad_getkey+0x164>
									break;
								case (2):
									if (j == 0)
 8000548:	79bb      	ldrb	r3, [r7, #6]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d101      	bne.n	8000552 <Keypad_getkey+0xf2>
										return '9';
 800054e:	2339      	movs	r3, #57	; 0x39
 8000550:	e038      	b.n	80005c4 <Keypad_getkey+0x164>
									else if (j == 1)
 8000552:	79bb      	ldrb	r3, [r7, #6]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d101      	bne.n	800055c <Keypad_getkey+0xfc>
										return '6';
 8000558:	2336      	movs	r3, #54	; 0x36
 800055a:	e033      	b.n	80005c4 <Keypad_getkey+0x164>
									else if (j == 2)
 800055c:	79bb      	ldrb	r3, [r7, #6]
 800055e:	2b02      	cmp	r3, #2
 8000560:	d101      	bne.n	8000566 <Keypad_getkey+0x106>
										return '3';
 8000562:	2333      	movs	r3, #51	; 0x33
 8000564:	e02e      	b.n	80005c4 <Keypad_getkey+0x164>
									else if (j == 3)
 8000566:	79bb      	ldrb	r3, [r7, #6]
 8000568:	2b03      	cmp	r3, #3
 800056a:	d119      	bne.n	80005a0 <Keypad_getkey+0x140>
										return '=';
 800056c:	233d      	movs	r3, #61	; 0x3d
 800056e:	e029      	b.n	80005c4 <Keypad_getkey+0x164>
									break;
								case (3):
									if (j == 0)
 8000570:	79bb      	ldrb	r3, [r7, #6]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d101      	bne.n	800057a <Keypad_getkey+0x11a>
										return '/';
 8000576:	232f      	movs	r3, #47	; 0x2f
 8000578:	e024      	b.n	80005c4 <Keypad_getkey+0x164>
									else if (j == 1)
 800057a:	79bb      	ldrb	r3, [r7, #6]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d101      	bne.n	8000584 <Keypad_getkey+0x124>
										return '*';
 8000580:	232a      	movs	r3, #42	; 0x2a
 8000582:	e01f      	b.n	80005c4 <Keypad_getkey+0x164>
									else if (j == 2)
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	2b02      	cmp	r3, #2
 8000588:	d101      	bne.n	800058e <Keypad_getkey+0x12e>
										return '-';
 800058a:	232d      	movs	r3, #45	; 0x2d
 800058c:	e01a      	b.n	80005c4 <Keypad_getkey+0x164>
									else if (j == 3)
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	2b03      	cmp	r3, #3
 8000592:	d107      	bne.n	80005a4 <Keypad_getkey+0x144>
										return '+';
 8000594:	232b      	movs	r3, #43	; 0x2b
 8000596:	e015      	b.n	80005c4 <Keypad_getkey+0x164>
									break;
 8000598:	bf00      	nop
 800059a:	e004      	b.n	80005a6 <Keypad_getkey+0x146>
									break;
 800059c:	bf00      	nop
 800059e:	e002      	b.n	80005a6 <Keypad_getkey+0x146>
									break;
 80005a0:	bf00      	nop
 80005a2:	e000      	b.n	80005a6 <Keypad_getkey+0x146>
									break;
 80005a4:	bf00      	nop
		for( j = 0 ; j < NCOLS ; j++)
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	3301      	adds	r3, #1
 80005aa:	71bb      	strb	r3, [r7, #6]
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	f67f af7d 	bls.w	80004ae <Keypad_getkey+0x4e>
	for(i = 0 ; i < NROWS ; i++)
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	3301      	adds	r3, #1
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	f67f af55 	bls.w	800046c <Keypad_getkey+0xc>

			}
		}
	}

	return 'A';
 80005c2:	2341      	movs	r3, #65	; 0x41
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40010c00 	.word	0x40010c00
 80005d0:	20000008 	.word	0x20000008
 80005d4:	20000000 	.word	0x20000000

080005d8 <delay_ms>:
 *  Author: Marco
 */

#include "lcd.h"

void delay_ms(uint32_t time) {
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	e00b      	b.n	80005fe <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	e002      	b.n	80005f2 <delay_ms+0x1a>
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	3301      	adds	r3, #1
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	2bfe      	cmp	r3, #254	; 0xfe
 80005f6:	d9f9      	bls.n	80005ec <delay_ms+0x14>
	for (i = 0; i < time; i++)
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	3301      	adds	r3, #1
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	429a      	cmp	r2, r3
 8000604:	d3ef      	bcc.n	80005e6 <delay_ms+0xe>
			;
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <LCD_GPIO_init>:

void LCD_GPIO_init() {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 8000614:	4b52      	ldr	r3, [pc, #328]	; (8000760 <LCD_GPIO_init+0x150>)
 8000616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800061a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800061c:	4b50      	ldr	r3, [pc, #320]	; (8000760 <LCD_GPIO_init+0x150>)
 800061e:	2204      	movs	r2, #4
 8000620:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000622:	4b4f      	ldr	r3, [pc, #316]	; (8000760 <LCD_GPIO_init+0x150>)
 8000624:	2201      	movs	r2, #1
 8000626:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000628:	494d      	ldr	r1, [pc, #308]	; (8000760 <LCD_GPIO_init+0x150>)
 800062a:	484e      	ldr	r0, [pc, #312]	; (8000764 <LCD_GPIO_init+0x154>)
 800062c:	f7ff fe03 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 8000630:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <LCD_GPIO_init+0x150>)
 8000632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000636:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000638:	4b49      	ldr	r3, [pc, #292]	; (8000760 <LCD_GPIO_init+0x150>)
 800063a:	2204      	movs	r2, #4
 800063c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800063e:	4b48      	ldr	r3, [pc, #288]	; (8000760 <LCD_GPIO_init+0x150>)
 8000640:	2201      	movs	r2, #1
 8000642:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000644:	4946      	ldr	r1, [pc, #280]	; (8000760 <LCD_GPIO_init+0x150>)
 8000646:	4847      	ldr	r0, [pc, #284]	; (8000764 <LCD_GPIO_init+0x154>)
 8000648:	f7ff fdf5 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 800064c:	4b44      	ldr	r3, [pc, #272]	; (8000760 <LCD_GPIO_init+0x150>)
 800064e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000652:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000654:	4b42      	ldr	r3, [pc, #264]	; (8000760 <LCD_GPIO_init+0x150>)
 8000656:	2204      	movs	r2, #4
 8000658:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800065a:	4b41      	ldr	r3, [pc, #260]	; (8000760 <LCD_GPIO_init+0x150>)
 800065c:	2201      	movs	r2, #1
 800065e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000660:	493f      	ldr	r1, [pc, #252]	; (8000760 <LCD_GPIO_init+0x150>)
 8000662:	4840      	ldr	r0, [pc, #256]	; (8000764 <LCD_GPIO_init+0x154>)
 8000664:	f7ff fde7 	bl	8000236 <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000668:	4b3d      	ldr	r3, [pc, #244]	; (8000760 <LCD_GPIO_init+0x150>)
 800066a:	2201      	movs	r2, #1
 800066c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800066e:	4b3c      	ldr	r3, [pc, #240]	; (8000760 <LCD_GPIO_init+0x150>)
 8000670:	2204      	movs	r2, #4
 8000672:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000674:	4b3a      	ldr	r3, [pc, #232]	; (8000760 <LCD_GPIO_init+0x150>)
 8000676:	2201      	movs	r2, #1
 8000678:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800067a:	4939      	ldr	r1, [pc, #228]	; (8000760 <LCD_GPIO_init+0x150>)
 800067c:	4839      	ldr	r0, [pc, #228]	; (8000764 <LCD_GPIO_init+0x154>)
 800067e:	f7ff fdda 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000682:	4b37      	ldr	r3, [pc, #220]	; (8000760 <LCD_GPIO_init+0x150>)
 8000684:	2202      	movs	r2, #2
 8000686:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000688:	4b35      	ldr	r3, [pc, #212]	; (8000760 <LCD_GPIO_init+0x150>)
 800068a:	2204      	movs	r2, #4
 800068c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800068e:	4b34      	ldr	r3, [pc, #208]	; (8000760 <LCD_GPIO_init+0x150>)
 8000690:	2201      	movs	r2, #1
 8000692:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000694:	4932      	ldr	r1, [pc, #200]	; (8000760 <LCD_GPIO_init+0x150>)
 8000696:	4833      	ldr	r0, [pc, #204]	; (8000764 <LCD_GPIO_init+0x154>)
 8000698:	f7ff fdcd 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800069c:	4b30      	ldr	r3, [pc, #192]	; (8000760 <LCD_GPIO_init+0x150>)
 800069e:	2204      	movs	r2, #4
 80006a0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006a2:	4b2f      	ldr	r3, [pc, #188]	; (8000760 <LCD_GPIO_init+0x150>)
 80006a4:	2204      	movs	r2, #4
 80006a6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006a8:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <LCD_GPIO_init+0x150>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80006ae:	492c      	ldr	r1, [pc, #176]	; (8000760 <LCD_GPIO_init+0x150>)
 80006b0:	482c      	ldr	r0, [pc, #176]	; (8000764 <LCD_GPIO_init+0x154>)
 80006b2:	f7ff fdc0 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80006b6:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <LCD_GPIO_init+0x150>)
 80006b8:	2208      	movs	r2, #8
 80006ba:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <LCD_GPIO_init+0x150>)
 80006be:	2204      	movs	r2, #4
 80006c0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006c2:	4b27      	ldr	r3, [pc, #156]	; (8000760 <LCD_GPIO_init+0x150>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80006c8:	4925      	ldr	r1, [pc, #148]	; (8000760 <LCD_GPIO_init+0x150>)
 80006ca:	4826      	ldr	r0, [pc, #152]	; (8000764 <LCD_GPIO_init+0x154>)
 80006cc:	f7ff fdb3 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80006d0:	4b23      	ldr	r3, [pc, #140]	; (8000760 <LCD_GPIO_init+0x150>)
 80006d2:	2210      	movs	r2, #16
 80006d4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006d6:	4b22      	ldr	r3, [pc, #136]	; (8000760 <LCD_GPIO_init+0x150>)
 80006d8:	2204      	movs	r2, #4
 80006da:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006dc:	4b20      	ldr	r3, [pc, #128]	; (8000760 <LCD_GPIO_init+0x150>)
 80006de:	2201      	movs	r2, #1
 80006e0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80006e2:	491f      	ldr	r1, [pc, #124]	; (8000760 <LCD_GPIO_init+0x150>)
 80006e4:	481f      	ldr	r0, [pc, #124]	; (8000764 <LCD_GPIO_init+0x154>)
 80006e6:	f7ff fda6 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 80006ea:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <LCD_GPIO_init+0x150>)
 80006ec:	2220      	movs	r2, #32
 80006ee:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <LCD_GPIO_init+0x150>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <LCD_GPIO_init+0x150>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80006fc:	4918      	ldr	r1, [pc, #96]	; (8000760 <LCD_GPIO_init+0x150>)
 80006fe:	4819      	ldr	r0, [pc, #100]	; (8000764 <LCD_GPIO_init+0x154>)
 8000700:	f7ff fd99 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <LCD_GPIO_init+0x150>)
 8000706:	2240      	movs	r2, #64	; 0x40
 8000708:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <LCD_GPIO_init+0x150>)
 800070c:	2204      	movs	r2, #4
 800070e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <LCD_GPIO_init+0x150>)
 8000712:	2201      	movs	r2, #1
 8000714:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000716:	4912      	ldr	r1, [pc, #72]	; (8000760 <LCD_GPIO_init+0x150>)
 8000718:	4812      	ldr	r0, [pc, #72]	; (8000764 <LCD_GPIO_init+0x154>)
 800071a:	f7ff fd8c 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <LCD_GPIO_init+0x150>)
 8000720:	2280      	movs	r2, #128	; 0x80
 8000722:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <LCD_GPIO_init+0x150>)
 8000726:	2204      	movs	r2, #4
 8000728:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <LCD_GPIO_init+0x150>)
 800072c:	2201      	movs	r2, #1
 800072e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000730:	490b      	ldr	r1, [pc, #44]	; (8000760 <LCD_GPIO_init+0x150>)
 8000732:	480c      	ldr	r0, [pc, #48]	; (8000764 <LCD_GPIO_init+0x154>)
 8000734:	f7ff fd7f 	bl	8000236 <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073e:	4809      	ldr	r0, [pc, #36]	; (8000764 <LCD_GPIO_init+0x154>)
 8000740:	f7ff fe0f 	bl	8000362 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <LCD_GPIO_init+0x154>)
 800074c:	f7ff fe09 	bl	8000362 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000756:	4803      	ldr	r0, [pc, #12]	; (8000764 <LCD_GPIO_init+0x154>)
 8000758:	f7ff fe03 	bl	8000362 <MCAL_GPIO_WritePin>

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000002c 	.word	0x2000002c
 8000764:	40010800 	.word	0x40010800

08000768 <LCD_clear_screen>:

void LCD_clear_screen() {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 800076c:	2001      	movs	r0, #1
 800076e:	f000 f857 	bl	8000820 <LCD_WRITE_COMMAND>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <LCD_lcd_kick>:

void LCD_lcd_kick() {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000782:	4807      	ldr	r0, [pc, #28]	; (80007a0 <LCD_lcd_kick+0x28>)
 8000784:	f7ff fded 	bl	8000362 <MCAL_GPIO_WritePin>
	delay_ms(50);
 8000788:	2032      	movs	r0, #50	; 0x32
 800078a:	f7ff ff25 	bl	80005d8 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <LCD_lcd_kick+0x28>)
 8000796:	f7ff fde4 	bl	8000362 <MCAL_GPIO_WritePin>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40010800 	.word	0x40010800

080007a4 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	460a      	mov	r2, r1
 80007ae:	71fb      	strb	r3, [r7, #7]
 80007b0:	4613      	mov	r3, r2
 80007b2:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d108      	bne.n	80007cc <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	2b0f      	cmp	r3, #15
 80007be:	d805      	bhi.n	80007cc <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 80007c0:	79bb      	ldrb	r3, [r7, #6]
 80007c2:	3b80      	subs	r3, #128	; 0x80
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f82a 	bl	8000820 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d108      	bne.n	80007e4 <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	2b0f      	cmp	r3, #15
 80007d6:	d805      	bhi.n	80007e4 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	3b40      	subs	r3, #64	; 0x40
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f81e 	bl	8000820 <LCD_WRITE_COMMAND>
		}
	}
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <LCD_INIT>:

void LCD_INIT() {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

	delay_ms(20);
 80007f0:	2014      	movs	r0, #20
 80007f2:	f7ff fef1 	bl	80005d8 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 80007f6:	f7ff ff0b 	bl	8000610 <LCD_GPIO_init>
//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 80007fa:	200f      	movs	r0, #15
 80007fc:	f7ff feec 	bl	80005d8 <delay_ms>

	LCD_clear_screen();
 8000800:	f7ff ffb2 	bl	8000768 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000804:	2038      	movs	r0, #56	; 0x38
 8000806:	f000 f80b 	bl	8000820 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800080a:	2006      	movs	r0, #6
 800080c:	f000 f808 	bl	8000820 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000810:	2080      	movs	r0, #128	; 0x80
 8000812:	f000 f805 	bl	8000820 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000816:	200f      	movs	r0, #15
 8000818:	f000 f802 	bl	8000820 <LCD_WRITE_COMMAND>
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	b29b      	uxth	r3, r3
 800082e:	4619      	mov	r1, r3
 8000830:	480b      	ldr	r0, [pc, #44]	; (8000860 <LCD_WRITE_COMMAND+0x40>)
 8000832:	f7ff fdad 	bl	8000390 <MCAL_GPIO_WritePort>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083c:	4808      	ldr	r0, [pc, #32]	; (8000860 <LCD_WRITE_COMMAND+0x40>)
 800083e:	f7ff fd90 	bl	8000362 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <LCD_WRITE_COMMAND+0x40>)
 800084a:	f7ff fd8a 	bl	8000362 <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff fec2 	bl	80005d8 <delay_ms>
	LCD_lcd_kick();
 8000854:	f7ff ff90 	bl	8000778 <LCD_lcd_kick>

}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40010800 	.word	0x40010800

08000864 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	b29b      	uxth	r3, r3
 8000872:	4619      	mov	r1, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <LCD_WRITE_CHAR+0x40>)
 8000876:	f7ff fd8b 	bl	8000390 <MCAL_GPIO_WritePort>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000880:	4808      	ldr	r0, [pc, #32]	; (80008a4 <LCD_WRITE_CHAR+0x40>)
 8000882:	f7ff fd6e 	bl	8000362 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <LCD_WRITE_CHAR+0x40>)
 800088e:	f7ff fd68 	bl	8000362 <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 8000892:	2001      	movs	r0, #1
 8000894:	f7ff fea0 	bl	80005d8 <delay_ms>
	LCD_lcd_kick();
 8000898:	f7ff ff6e 	bl	8000778 <LCD_lcd_kick>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40010800 	.word	0x40010800

080008a8 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	int count = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 80008b4:	e01c      	b.n	80008f0 <LCD_WRITE_STRING+0x48>
		count++;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	3301      	adds	r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	607a      	str	r2, [r7, #4]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ffcd 	bl	8000864 <LCD_WRITE_CHAR>
		if (count == 16) {
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	2b10      	cmp	r3, #16
 80008ce:	d104      	bne.n	80008da <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 80008d0:	2100      	movs	r1, #0
 80008d2:	2002      	movs	r0, #2
 80008d4:	f7ff ff66 	bl	80007a4 <LCD_GOTO_XY>
 80008d8:	e00a      	b.n	80008f0 <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	2b20      	cmp	r3, #32
 80008de:	d107      	bne.n	80008f0 <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 80008e0:	f7ff ff42 	bl	8000768 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 80008e4:	2100      	movs	r1, #0
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff ff5c 	bl	80007a4 <LCD_GOTO_XY>
			count = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1de      	bne.n	80008b6 <LCD_WRITE_STRING+0xe>
		}
	}
}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <clock_init>:
#define SIX 0x02
#define SEVEN 0x19
#define EIGHT 0x00
#define NINE 0x10

void clock_init() {
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
	//Enable clock GPIOA
	RCC_GPIOA_CLK_EN();
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <clock_init+0x24>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <clock_init+0x24>)
 800090a:	f043 0304 	orr.w	r3, r3, #4
 800090e:	6193      	str	r3, [r2, #24]
	//Enable clock GPIOB Bit 3 IOPBEN: IO port B clock enable
	RCC_GPIOB_CLK_EN();
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <clock_init+0x24>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a03      	ldr	r2, [pc, #12]	; (8000924 <clock_init+0x24>)
 8000916:	f043 0308 	orr.w	r3, r3, #8
 800091a:	6193      	str	r3, [r2, #24]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	40021000 	.word	0x40021000

08000928 <GPIO_init>:
void GPIO_init() {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
//	MCAL_GPIO_Init(GPIOA, &PinCfg);

//PB1 (output PUSH pull Mode)
//01: Output mode, max speed 10 MHz.
//CNF 00: General purpose output push-pull
	PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 800092e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000932:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000934:	2304      	movs	r3, #4
 8000936:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000938:	2301      	movs	r3, #1
 800093a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4619      	mov	r1, r3
 8000940:	4827      	ldr	r0, [pc, #156]	; (80009e0 <GPIO_init+0xb8>)
 8000942:	f7ff fc78 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800094c:	2304      	movs	r3, #4
 800094e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000950:	2301      	movs	r3, #1
 8000952:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4619      	mov	r1, r3
 8000958:	4821      	ldr	r0, [pc, #132]	; (80009e0 <GPIO_init+0xb8>)
 800095a:	f7ff fc6c 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 800095e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000962:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000964:	2304      	movs	r3, #4
 8000966:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000968:	2301      	movs	r3, #1
 800096a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	4619      	mov	r1, r3
 8000970:	481b      	ldr	r0, [pc, #108]	; (80009e0 <GPIO_init+0xb8>)
 8000972:	f7ff fc60 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800097c:	2304      	movs	r3, #4
 800097e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000980:	2301      	movs	r3, #1
 8000982:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	4619      	mov	r1, r3
 8000988:	4815      	ldr	r0, [pc, #84]	; (80009e0 <GPIO_init+0xb8>)
 800098a:	f7ff fc54 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 800098e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000992:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000994:	2304      	movs	r3, #4
 8000996:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000998:	2301      	movs	r3, #1
 800099a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	4619      	mov	r1, r3
 80009a0:	480f      	ldr	r0, [pc, #60]	; (80009e0 <GPIO_init+0xb8>)
 80009a2:	f7ff fc48 	bl	8000236 <MCAL_GPIO_Init>

	//============================

	//PA13 input HighZ Floating input (reset state)
	PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 80009a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009aa:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80009ac:	2304      	movs	r3, #4
 80009ae:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009b0:	2301      	movs	r3, #1
 80009b2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	4619      	mov	r1, r3
 80009b8:	4809      	ldr	r0, [pc, #36]	; (80009e0 <GPIO_init+0xb8>)
 80009ba:	f7ff fc3c 	bl	8000236 <MCAL_GPIO_Init>

	//PB13 (output PUSH pull Mode)
	PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 80009be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009c2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80009c4:	2304      	movs	r3, #4
 80009c6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009c8:	2301      	movs	r3, #1
 80009ca:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	4803      	ldr	r0, [pc, #12]	; (80009e0 <GPIO_init+0xb8>)
 80009d2:	f7ff fc30 	bl	8000236 <MCAL_GPIO_Init>

}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40010c00 	.word	0x40010c00

080009e4 <wait_ms>:
void wait_ms(uint32_t time) {
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	e00b      	b.n	8000a0a <wait_ms+0x26>
		for (j = 0; j < 255; j++)
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	e002      	b.n	80009fe <wait_ms+0x1a>
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	3301      	adds	r3, #1
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	2bfe      	cmp	r3, #254	; 0xfe
 8000a02:	d9f9      	bls.n	80009f8 <wait_ms+0x14>
	for (i = 0; i < time; i++)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	3301      	adds	r3, #1
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d3ef      	bcc.n	80009f2 <wait_ms+0xe>
			;
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <main>:
int main(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0

	clock_init();
 8000a22:	f7ff ff6d 	bl	8000900 <clock_init>
	LCD_INIT();
 8000a26:	f7ff fee1 	bl	80007ec <LCD_INIT>
	unsigned char key_pressed;
	LCD_WRITE_STRING("HEY");
 8000a2a:	482e      	ldr	r0, [pc, #184]	; (8000ae4 <main+0xc8>)
 8000a2c:	f7ff ff3c 	bl	80008a8 <LCD_WRITE_STRING>
	wait_ms(30);
 8000a30:	201e      	movs	r0, #30
 8000a32:	f7ff ffd7 	bl	80009e4 <wait_ms>
	LCD_clear_screen();
 8000a36:	f7ff fe97 	bl	8000768 <LCD_clear_screen>
	GPIO_init();
 8000a3a:	f7ff ff75 	bl	8000928 <GPIO_init>
	unsigned char LCD_DISPLAY [11] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 8000a3e:	4a2a      	ldr	r2, [pc, #168]	; (8000ae8 <main+0xcc>)
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a46:	c303      	stmia	r3!, {r0, r1}
 8000a48:	801a      	strh	r2, [r3, #0]
 8000a4a:	3302      	adds	r3, #2
 8000a4c:	0c12      	lsrs	r2, r2, #16
 8000a4e:	701a      	strb	r2, [r3, #0]
	unsigned char DISPLAY [11] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 8000a50:	4a26      	ldr	r2, [pc, #152]	; (8000aec <main+0xd0>)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a56:	c303      	stmia	r3!, {r0, r1}
 8000a58:	801a      	strh	r2, [r3, #0]
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	0c12      	lsrs	r2, r2, #16
 8000a5e:	701a      	strb	r2, [r3, #0]
	for (unsigned char i = 0; i < 11; i++) {
 8000a60:	2300      	movs	r3, #0
 8000a62:	77fb      	strb	r3, [r7, #31]
 8000a64:	e01b      	b.n	8000a9e <main+0x82>
		LCD_WRITE_CHAR(LCD_DISPLAY[i]);
 8000a66:	7ffb      	ldrb	r3, [r7, #31]
 8000a68:	f107 0220 	add.w	r2, r7, #32
 8000a6c:	4413      	add	r3, r2
 8000a6e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fef6 	bl	8000864 <LCD_WRITE_CHAR>
		MCAL_GPIO_WritePort(GPIOB, DISPLAY[i] << 9); /* write data on to the LED port */
 8000a78:	7ffb      	ldrb	r3, [r7, #31]
 8000a7a:	f107 0220 	add.w	r2, r7, #32
 8000a7e:	4413      	add	r3, r2
 8000a80:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	025b      	lsls	r3, r3, #9
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4818      	ldr	r0, [pc, #96]	; (8000af0 <main+0xd4>)
 8000a8e:	f7ff fc7f 	bl	8000390 <MCAL_GPIO_WritePort>
		wait_ms(100);
 8000a92:	2064      	movs	r0, #100	; 0x64
 8000a94:	f7ff ffa6 	bl	80009e4 <wait_ms>
	for (unsigned char i = 0; i < 11; i++) {
 8000a98:	7ffb      	ldrb	r3, [r7, #31]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	77fb      	strb	r3, [r7, #31]
 8000a9e:	7ffb      	ldrb	r3, [r7, #31]
 8000aa0:	2b0a      	cmp	r3, #10
 8000aa2:	d9e0      	bls.n	8000a66 <main+0x4a>
		/* wait for 1 second */
	}
//	MCAL_GPIO_WritePort(GPIOB, 0xDE);
//	wait_ms(100);
	LCD_clear_screen();
 8000aa4:	f7ff fe60 	bl	8000768 <LCD_clear_screen>
	Keypad_init();
 8000aa8:	f7ff fc80 	bl	80003ac <Keypad_init>
	LCD_WRITE_STRING("Keypad is ready");
 8000aac:	4811      	ldr	r0, [pc, #68]	; (8000af4 <main+0xd8>)
 8000aae:	f7ff fefb 	bl	80008a8 <LCD_WRITE_STRING>
	wait_ms(30);
 8000ab2:	201e      	movs	r0, #30
 8000ab4:	f7ff ff96 	bl	80009e4 <wait_ms>
	LCD_clear_screen();
 8000ab8:	f7ff fe56 	bl	8000768 <LCD_clear_screen>

	while (1) {

		key_pressed = Keypad_getkey();
 8000abc:	f7ff fcd0 	bl	8000460 <Keypad_getkey>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	77bb      	strb	r3, [r7, #30]
		switch (key_pressed) {
 8000ac4:	7fbb      	ldrb	r3, [r7, #30]
 8000ac6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ac8:	d002      	beq.n	8000ad0 <main+0xb4>
 8000aca:	2b41      	cmp	r3, #65	; 0x41
 8000acc:	d008      	beq.n	8000ae0 <main+0xc4>
 8000ace:	e002      	b.n	8000ad6 <main+0xba>
		case 'A':
			break;
		case '?':
			LCD_clear_screen();
 8000ad0:	f7ff fe4a 	bl	8000768 <LCD_clear_screen>
			break;
 8000ad4:	e005      	b.n	8000ae2 <main+0xc6>
		default:
			LCD_WRITE_CHAR(key_pressed);
 8000ad6:	7fbb      	ldrb	r3, [r7, #30]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fec3 	bl	8000864 <LCD_WRITE_CHAR>
			break;
 8000ade:	e000      	b.n	8000ae2 <main+0xc6>
			break;
 8000ae0:	bf00      	nop
		key_pressed = Keypad_getkey();
 8000ae2:	e7eb      	b.n	8000abc <main+0xa0>
 8000ae4:	08000bac 	.word	0x08000bac
 8000ae8:	08000bc0 	.word	0x08000bc0
 8000aec:	08000bcc 	.word	0x08000bcc
 8000af0:	40010c00 	.word	0x40010c00
 8000af4:	08000bb0 	.word	0x08000bb0

08000af8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000afa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000afc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b02:	490d      	ldr	r1, [pc, #52]	; (8000b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <LoopForever+0xe>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b18:	4c0a      	ldr	r4, [pc, #40]	; (8000b44 <LoopForever+0x16>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b26:	f000 f811 	bl	8000b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b2a:	f7ff ff77 	bl	8000a1c <main>

08000b2e <LoopForever>:

LoopForever:
    b LoopForever
 8000b2e:	e7fe      	b.n	8000b2e <LoopForever>
  ldr   r0, =_estack
 8000b30:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b3c:	08000be0 	.word	0x08000be0
  ldr r2, =_sbss
 8000b40:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b44:	20000030 	.word	0x20000030

08000b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC1_2_IRQHandler>
	...

08000b4c <__libc_init_array>:
 8000b4c:	b570      	push	{r4, r5, r6, lr}
 8000b4e:	2500      	movs	r5, #0
 8000b50:	4e0c      	ldr	r6, [pc, #48]	; (8000b84 <__libc_init_array+0x38>)
 8000b52:	4c0d      	ldr	r4, [pc, #52]	; (8000b88 <__libc_init_array+0x3c>)
 8000b54:	1ba4      	subs	r4, r4, r6
 8000b56:	10a4      	asrs	r4, r4, #2
 8000b58:	42a5      	cmp	r5, r4
 8000b5a:	d109      	bne.n	8000b70 <__libc_init_array+0x24>
 8000b5c:	f000 f81a 	bl	8000b94 <_init>
 8000b60:	2500      	movs	r5, #0
 8000b62:	4e0a      	ldr	r6, [pc, #40]	; (8000b8c <__libc_init_array+0x40>)
 8000b64:	4c0a      	ldr	r4, [pc, #40]	; (8000b90 <__libc_init_array+0x44>)
 8000b66:	1ba4      	subs	r4, r4, r6
 8000b68:	10a4      	asrs	r4, r4, #2
 8000b6a:	42a5      	cmp	r5, r4
 8000b6c:	d105      	bne.n	8000b7a <__libc_init_array+0x2e>
 8000b6e:	bd70      	pop	{r4, r5, r6, pc}
 8000b70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b74:	4798      	blx	r3
 8000b76:	3501      	adds	r5, #1
 8000b78:	e7ee      	b.n	8000b58 <__libc_init_array+0xc>
 8000b7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b7e:	4798      	blx	r3
 8000b80:	3501      	adds	r5, #1
 8000b82:	e7f2      	b.n	8000b6a <__libc_init_array+0x1e>
 8000b84:	08000bd8 	.word	0x08000bd8
 8000b88:	08000bd8 	.word	0x08000bd8
 8000b8c:	08000bd8 	.word	0x08000bd8
 8000b90:	08000bdc 	.word	0x08000bdc

08000b94 <_init>:
 8000b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b96:	bf00      	nop
 8000b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b9a:	bc08      	pop	{r3}
 8000b9c:	469e      	mov	lr, r3
 8000b9e:	4770      	bx	lr

08000ba0 <_fini>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	bf00      	nop
 8000ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ba6:	bc08      	pop	{r3}
 8000ba8:	469e      	mov	lr, r3
 8000baa:	4770      	bx	lr
