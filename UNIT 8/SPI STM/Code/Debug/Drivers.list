
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fec  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800111c  0800111c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800111c  0800111c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800111c  0800111c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800111c  0800111c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800111c  0800111c  0001111c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001120  08001120  00011120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08001124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000018  0800113c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  0800113c  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000537c  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d0b  00000000  00000000  000253bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000dd6  00000000  00000000  000260c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000238  00000000  00000000  00026ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d0  00000000  00000000  000270d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002bbe  00000000  00000000  000272a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000255a  00000000  00000000  00029e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000af02  00000000  00000000  0002c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000372c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000728  00000000  00000000  00037340  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	08001104 	.word	0x08001104

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	08001104 	.word	0x08001104

08000170 <EXTI0_IRQHandler>:




void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	// clear the bit in the pending register
	EXTI->PR |= (1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	// call the CallBack Function
	GP_IRQ_callBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000070 	.word	0x20000070

08000194 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0

	EXTI->PR |= (1<<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000070 	.word	0x20000070

080001b8 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0

	EXTI->PR |= (1<<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3

}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000070 	.word	0x20000070

080001dc <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0

	EXTI->PR |= (1<<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3

}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000070 	.word	0x20000070

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0

	EXTI->PR |= (1<<4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3

}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000070 	.word	0x20000070

08000224 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1<<5) ) { EXTI->PR |= (1<<5) ; GP_IRQ_callBack[5](); }
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if (EXTI->PR & (1<<6) ) { EXTI->PR |= (1<<6) ; GP_IRQ_callBack[6](); }
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if (EXTI->PR & (1<<7) ) { EXTI->PR |= (1<<7) ; GP_IRQ_callBack[7](); }
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if (EXTI->PR & (1<<8) ) { EXTI->PR |= (1<<8) ; GP_IRQ_callBack[8](); }
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if (EXTI->PR & (1<<9) ) { EXTI->PR |= (1<<9) ; GP_IRQ_callBack[9](); }
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000070 	.word	0x20000070

080002cc <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1<<10) ) { EXTI->PR |= (1<<10) ; GP_IRQ_callBack[10](); }
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if (EXTI->PR & (1<<11) ) { EXTI->PR |= (1<<11) ; GP_IRQ_callBack[11](); }
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if (EXTI->PR & (1<<12) ) { EXTI->PR |= (1<<12) ; GP_IRQ_callBack[12](); }
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if (EXTI->PR & (1<<13) ) { EXTI->PR |= (1<<13) ; GP_IRQ_callBack[13](); }
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if (EXTI->PR & (1<<14) ) { EXTI->PR |= (1<<14) ; GP_IRQ_callBack[14](); }
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if (EXTI->PR & (1<<15) ) { EXTI->PR |= (1<<15) ; GP_IRQ_callBack[15](); }
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000070 	.word	0x20000070

08000390 <Get_CRLH_Position>:

#include "Stm32_F103C6_gpio_driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <Get_CRLH_Position+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <Get_CRLH_Position+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <Get_CRLH_Position+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <Get_CRLH_Position+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <Get_CRLH_Position+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <Get_CRLH_Position+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <Get_CRLH_Position+0x7a>
 80003b8:	e047      	b.n	800044a <Get_CRLH_Position+0xba>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <Get_CRLH_Position+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <Get_CRLH_Position+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <Get_CRLH_Position+0x8a>
 80003c6:	e040      	b.n	800044a <Get_CRLH_Position+0xba>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d033      	beq.n	8000436 <Get_CRLH_Position+0xa6>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <Get_CRLH_Position+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d029      	beq.n	800042e <Get_CRLH_Position+0x9e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d028      	beq.n	8000432 <Get_CRLH_Position+0xa2>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d021      	beq.n	800042a <Get_CRLH_Position+0x9a>
 80003e6:	e030      	b.n	800044a <Get_CRLH_Position+0xba>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d027      	beq.n	800043e <Get_CRLH_Position+0xae>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <Get_CRLH_Position+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d01f      	beq.n	800043a <Get_CRLH_Position+0xaa>
 80003fa:	e026      	b.n	800044a <Get_CRLH_Position+0xba>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d01f      	beq.n	8000442 <Get_CRLH_Position+0xb2>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d01e      	beq.n	8000446 <Get_CRLH_Position+0xb6>
 8000408:	e01f      	b.n	800044a <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 800040a:	2300      	movs	r3, #0
 800040c:	e01e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 800040e:	2304      	movs	r3, #4
 8000410:	e01c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2:
		return 8 ;
 8000412:	2308      	movs	r3, #8
 8000414:	e01a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3:
		return 12 ;
 8000416:	230c      	movs	r3, #12
 8000418:	e018      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 800041a:	2310      	movs	r3, #16
 800041c:	e016      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 800041e:	2314      	movs	r3, #20
 8000420:	e014      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 8000422:	2318      	movs	r3, #24
 8000424:	e012      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 8000426:	231c      	movs	r3, #28
 8000428:	e010      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_8:
		return 0 ;
 800042a:	2300      	movs	r3, #0
 800042c:	e00e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 800042e:	2304      	movs	r3, #4
 8000430:	e00c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 8000432:	2308      	movs	r3, #8
 8000434:	e00a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 8000436:	230c      	movs	r3, #12
 8000438:	e008      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 800043a:	2310      	movs	r3, #16
 800043c:	e006      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 800043e:	2314      	movs	r3, #20
 8000440:	e004      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 8000442:	2318      	movs	r3, #24
 8000444:	e002      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 8000446:	231c      	movs	r3, #28
 8000448:	e000      	b.n	800044c <Get_CRLH_Position+0xbc>



	}

	return 0 ;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <MCAL_GPIO_Init>:
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig)
{
 8000456:	b590      	push	{r4, r7, lr}
 8000458:	b085      	sub	sp, #20
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL ;
 8000460:	2300      	movs	r3, #0
 8000462:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0 ;
 8000464:	2300      	movs	r3, #0
 8000466:	73fb      	strb	r3, [r7, #15]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 )?  &GPIOx->CRL : &GPIOx->CRH ;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	2bff      	cmp	r3, #255	; 0xff
 800046e:	d801      	bhi.n	8000474 <MCAL_GPIO_Init+0x1e>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	e001      	b.n	8000478 <MCAL_GPIO_Init+0x22>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3304      	adds	r3, #4
 8000478:	60bb      	str	r3, [r7, #8]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff86 	bl	8000390 <Get_CRLH_Position>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	230f      	movs	r3, #15
 800048a:	4093      	lsls	r3, r2
 800048c:	43da      	mvns	r2, r3
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	401a      	ands	r2, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if (  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	2b07      	cmp	r3, #7
 800049e:	d00b      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	2b06      	cmp	r3, #6
 80004a6:	d007      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	789b      	ldrb	r3, [r3, #2]
 80004ac:	2b05      	cmp	r3, #5
 80004ae:	d003      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	789b      	ldrb	r3, [r3, #2]
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d10e      	bne.n	80004d6 <MCAL_GPIO_Init+0x80>
	{
		//Set  CNF8[1:0] MODE8[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f ) ;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	3b04      	subs	r3, #4
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	b25a      	sxtb	r2, r3
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	78db      	ldrb	r3, [r3, #3]
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	4313      	orrs	r3, r2
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	f003 030f 	and.w	r3, r3, #15
 80004d2:	73fb      	strb	r3, [r7, #15]
 80004d4:	e02c      	b.n	8000530 <MCAL_GPIO_Init+0xda>

	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) ||  (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d003      	beq.n	80004e6 <MCAL_GPIO_Init+0x90>
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	789b      	ldrb	r3, [r3, #2]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d107      	bne.n	80004f6 <MCAL_GPIO_Init+0xa0>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((PinConfig->GPIO_MODE  ) << 2) | 0x0) & 0x0f ) ;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	789b      	ldrb	r3, [r3, #2]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	f003 030f 	and.w	r3, r3, #15
 80004f2:	73fb      	strb	r3, [r7, #15]
 80004f4:	e01c      	b.n	8000530 <MCAL_GPIO_Init+0xda>

		}else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	789b      	ldrb	r3, [r3, #2]
 80004fa:	2b08      	cmp	r3, #8
 80004fc:	d102      	bne.n	8000504 <MCAL_GPIO_Init+0xae>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO  ) << 2) | 0x0) & 0x0f ) ;
 80004fe:	2304      	movs	r3, #4
 8000500:	73fb      	strb	r3, [r7, #15]
 8000502:	e015      	b.n	8000530 <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU  ) << 2) | 0x0) & 0x0f ) ;
 8000504:	2308      	movs	r3, #8
 8000506:	73fb      	strb	r3, [r7, #15]

			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	789b      	ldrb	r3, [r3, #2]
 800050c:	2b02      	cmp	r3, #2
 800050e:	d107      	bne.n	8000520 <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	8812      	ldrh	r2, [r2, #0]
 8000518:	431a      	orrs	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	e007      	b.n	8000530 <MCAL_GPIO_Init+0xda>

			}else
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	8812      	ldrh	r2, [r2, #0]
 8000528:	43d2      	mvns	r2, r2
 800052a:	401a      	ands	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60da      	str	r2, [r3, #12]

		}

	}
// write on the CRL or CRH
	(*configregister) |=  ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)   );
 8000530:	7bfc      	ldrb	r4, [r7, #15]
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff2a 	bl	8000390 <Get_CRLH_Position>
 800053c:	4603      	mov	r3, r0
 800053e:	fa04 f203 	lsl.w	r2, r4, r3
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	431a      	orrs	r2, r3
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	601a      	str	r2, [r3, #0]

}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	bd90      	pop	{r4, r7, pc}

08000554 <MCAL_GPIO_WritePin>:
 *@param [in] 			-Value: Pin Value
 * @retval 			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOx,uint16_t PinNumber , uint8_t Value)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	807b      	strh	r3, [r7, #2]
 8000560:	4613      	mov	r3, r2
 8000562:	707b      	strb	r3, [r7, #1]
	if ( Value !=  GPIO_PIN_RESET )
 8000564:	787b      	ldrb	r3, [r7, #1]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d003      	beq.n	8000572 <MCAL_GPIO_WritePin+0x1e>
//		or
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber ;
 800056a:	887a      	ldrh	r2, [r7, #2]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	611a      	str	r2, [r3, #16]
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber ;
	}

}
 8000570:	e002      	b.n	8000578 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber ;
 8000572:	887a      	ldrh	r2, [r7, #2]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	615a      	str	r2, [r3, #20]
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr
	...

08000584 <MCAL_RCC_GetSYS_CLKFreq>:
//1111: SYSCLK divided by 512

uint8_t AHBPrescTable[16] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};

uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable
	switch((RCC->CFGR>>2) & 0b11)
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <MCAL_RCC_GetSYS_CLKFreq+0x30>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	089b      	lsrs	r3, r3, #2
 800058e:	f003 0303 	and.w	r3, r3, #3
 8000592:	2b01      	cmp	r3, #1
 8000594:	d006      	beq.n	80005a4 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 8000596:	2b01      	cmp	r3, #1
 8000598:	d302      	bcc.n	80005a0 <MCAL_RCC_GetSYS_CLKFreq+0x1c>
 800059a:	2b02      	cmp	r3, #2
 800059c:	d004      	beq.n	80005a8 <MCAL_RCC_GetSYS_CLKFreq+0x24>
 800059e:	e005      	b.n	80005ac <MCAL_RCC_GetSYS_CLKFreq+0x28>
	{
	case 0:
		return HSI_RC_CLK;
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 80005a2:	e003      	b.n	80005ac <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;

	case 1:
		return HSE_Clock;
 80005a4:	2300      	movs	r3, #0
 80005a6:	e001      	b.n	80005ac <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;

	case 2:
		return 16000000;
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 80005aa:	e7ff      	b.n	80005ac <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;

	}
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	40021000 	.word	0x40021000
 80005b8:	007a1200 	.word	0x007a1200
 80005bc:	00f42400 	.word	0x00f42400

080005c0 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return MCAL_RCC_GetSYS_CLKFreq()>>AHBPrescTable[((RCC->CFGR>>4) & 0b111)];
 80005c4:	f7ff ffde 	bl	8000584 <MCAL_RCC_GetSYS_CLKFreq>
 80005c8:	4601      	mov	r1, r0
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <MCAL_RCC_GetHCLKFreq+0x20>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	091b      	lsrs	r3, r3, #4
 80005d0:	f003 0307 	and.w	r3, r3, #7
 80005d4:	4a03      	ldr	r2, [pc, #12]	; (80005e4 <MCAL_RCC_GetHCLKFreq+0x24>)
 80005d6:	5cd3      	ldrb	r3, [r2, r3]
 80005d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005dc:	4618      	mov	r0, r3
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000
 80005e4:	20000008 	.word	0x20000008

080005e8 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return MCAL_RCC_GetHCLKFreq()>>APBPrescTable[((RCC->CFGR>>8) & 0b111)];
 80005ec:	f7ff ffe8 	bl	80005c0 <MCAL_RCC_GetHCLKFreq>
 80005f0:	4601      	mov	r1, r0
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <MCAL_RCC_GetPCLK1Freq+0x20>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	0a1b      	lsrs	r3, r3, #8
 80005f8:	f003 0307 	and.w	r3, r3, #7
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <MCAL_RCC_GetPCLK1Freq+0x24>)
 80005fe:	5cd3      	ldrb	r3, [r2, r3]
 8000600:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000604:	4618      	mov	r0, r3
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021000 	.word	0x40021000
 800060c:	20000000 	.word	0x20000000

08000610 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	// Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return MCAL_RCC_GetHCLKFreq()>>APBPrescTable[((RCC->CFGR>>11) & 0b111)];
 8000614:	f7ff ffd4 	bl	80005c0 <MCAL_RCC_GetHCLKFreq>
 8000618:	4601      	mov	r1, r0
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <MCAL_RCC_GetPCLK2Freq+0x20>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	0adb      	lsrs	r3, r3, #11
 8000620:	f003 0307 	and.w	r3, r3, #7
 8000624:	4a03      	ldr	r2, [pc, #12]	; (8000634 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000626:	5cd3      	ldrb	r3, [r2, r3]
 8000628:	fa21 f303 	lsr.w	r3, r1, r3
}
 800062c:	4618      	mov	r0, r3
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000
 8000634:	20000000 	.word	0x20000000

08000638 <MCAL_SPI_Init>:
 * @retval 			- None
 * Note				- Support for SPI Full Duplex Master/Slave only & NSS HW/SW
 * 					- in case of master you have to configure pin and drive it
 */
void MCAL_SPI_Init(SPI_TypeDef* SPIx , SPI_Config* SPI_Config)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
	uint16_t tempreg_CR1 = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	81fb      	strh	r3, [r7, #14]
	uint16_t tempreg_CR2 = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	81bb      	strh	r3, [r7, #12]

	if(SPIx == SPI1)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a4d      	ldr	r2, [pc, #308]	; (8000784 <MCAL_SPI_Init+0x14c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d109      	bne.n	8000666 <MCAL_SPI_Init+0x2e>
	{
		Global_SPI_Config[SPI1_Index] = SPI_Config;
 8000652:	4a4d      	ldr	r2, [pc, #308]	; (8000788 <MCAL_SPI_Init+0x150>)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN();
 8000658:	4b4c      	ldr	r3, [pc, #304]	; (800078c <MCAL_SPI_Init+0x154>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a4b      	ldr	r2, [pc, #300]	; (800078c <MCAL_SPI_Init+0x154>)
 800065e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	e008      	b.n	8000678 <MCAL_SPI_Init+0x40>
	}
	else
	{
		Global_SPI_Config[SPI2_Index] = SPI_Config;
 8000666:	4a48      	ldr	r2, [pc, #288]	; (8000788 <MCAL_SPI_Init+0x150>)
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN();
 800066c:	4b47      	ldr	r3, [pc, #284]	; (800078c <MCAL_SPI_Init+0x154>)
 800066e:	69db      	ldr	r3, [r3, #28]
 8000670:	4a46      	ldr	r2, [pc, #280]	; (800078c <MCAL_SPI_Init+0x154>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	61d3      	str	r3, [r2, #28]
	}

	// Enable SPI CR1 -> Bit6 SPE: SPI enable
	tempreg_CR1 = (1<<6);
 8000678:	2340      	movs	r3, #64	; 0x40
 800067a:	81fb      	strh	r3, [r7, #14]

	// Master or Slave
	tempreg_CR1 |= SPI_Config->Device_Mode;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	881a      	ldrh	r2, [r3, #0]
 8000680:	89fb      	ldrh	r3, [r7, #14]
 8000682:	4313      	orrs	r3, r2
 8000684:	81fb      	strh	r3, [r7, #14]

	// SPI_communication_Mode
	tempreg_CR1 |= SPI_Config->Communicaion_Mode;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	885a      	ldrh	r2, [r3, #2]
 800068a:	89fb      	ldrh	r3, [r7, #14]
 800068c:	4313      	orrs	r3, r2
 800068e:	81fb      	strh	r3, [r7, #14]

	// SPI_Frame_Format
	tempreg_CR1 |= SPI_Config->Frame_Format;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	889a      	ldrh	r2, [r3, #4]
 8000694:	89fb      	ldrh	r3, [r7, #14]
 8000696:	4313      	orrs	r3, r2
 8000698:	81fb      	strh	r3, [r7, #14]

	// SPI_DataSize
	tempreg_CR1 |= SPI_Config->Data_Size;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	88da      	ldrh	r2, [r3, #6]
 800069e:	89fb      	ldrh	r3, [r7, #14]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	81fb      	strh	r3, [r7, #14]

	// SPI_Clock_Polarity
	tempreg_CR1 |= SPI_Config->CLKPolarity;
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	891a      	ldrh	r2, [r3, #8]
 80006a8:	89fb      	ldrh	r3, [r7, #14]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	81fb      	strh	r3, [r7, #14]

	// SPI_Clock_Phase
	tempreg_CR1 |= SPI_Config->CLKPhase;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	895a      	ldrh	r2, [r3, #10]
 80006b2:	89fb      	ldrh	r3, [r7, #14]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	81fb      	strh	r3, [r7, #14]


	if(SPI_Config->NSS == SPI_NSS_Hard_Master_SS_output_enable)
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	899b      	ldrh	r3, [r3, #12]
 80006bc:	2b04      	cmp	r3, #4
 80006be:	d105      	bne.n	80006cc <MCAL_SPI_Init+0x94>
	{
		tempreg_CR2 |= SPI_Config->NSS;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	899a      	ldrh	r2, [r3, #12]
 80006c4:	89bb      	ldrh	r3, [r7, #12]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	81bb      	strh	r3, [r7, #12]
 80006ca:	e00e      	b.n	80006ea <MCAL_SPI_Init+0xb2>

	}else if(SPI_Config->NSS == SPI_NSS_Hard_Master_SS_output_enable)
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	899b      	ldrh	r3, [r3, #12]
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d105      	bne.n	80006e0 <MCAL_SPI_Init+0xa8>
	{
		tempreg_CR2 &= SPI_Config->NSS;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	899a      	ldrh	r2, [r3, #12]
 80006d8:	89bb      	ldrh	r3, [r7, #12]
 80006da:	4013      	ands	r3, r2
 80006dc:	81bb      	strh	r3, [r7, #12]
 80006de:	e004      	b.n	80006ea <MCAL_SPI_Init+0xb2>
	}
	else
	{
		// rest in CR1
		tempreg_CR1 |= SPI_Config->NSS;
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	899a      	ldrh	r2, [r3, #12]
 80006e4:	89fb      	ldrh	r3, [r7, #14]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	81fb      	strh	r3, [r7, #14]
	}


	tempreg_CR1 |= SPI_Config->SPI_BAUDRATEPRESCALER;
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	89da      	ldrh	r2, [r3, #14]
 80006ee:	89fb      	ldrh	r3, [r7, #14]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	81fb      	strh	r3, [r7, #14]


	if(SPI_Config->IRQ_Enable.ENABLE != SPI_DISABLE_IRQ)
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	7c1b      	ldrb	r3, [r3, #16]
 80006f8:	f003 0310 	and.w	r3, r3, #16
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d035      	beq.n	800076e <MCAL_SPI_Init+0x136>
	{
		if(SPI_Config->IRQ_Enable.TXE) {tempreg_CR2 |= SPI_IRQ_Enable_TXEIE;}
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	7c1b      	ldrb	r3, [r3, #16]
 8000706:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	d003      	beq.n	8000718 <MCAL_SPI_Init+0xe0>
 8000710:	89bb      	ldrh	r3, [r7, #12]
 8000712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000716:	81bb      	strh	r3, [r7, #12]
		if(SPI_Config->IRQ_Enable.RXNE) {tempreg_CR2 |= SPI_IRQ_Enable_RXNEIE;}
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	7c1b      	ldrb	r3, [r3, #16]
 800071c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000720:	b2db      	uxtb	r3, r3
 8000722:	2b00      	cmp	r3, #0
 8000724:	d003      	beq.n	800072e <MCAL_SPI_Init+0xf6>
 8000726:	89bb      	ldrh	r3, [r7, #12]
 8000728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072c:	81bb      	strh	r3, [r7, #12]
		if(SPI_Config->IRQ_Enable.ERRiI) {tempreg_CR2 |= SPI_IRQ_Enable_ERRIE;}
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	7c1b      	ldrb	r3, [r3, #16]
 8000732:	f003 0320 	and.w	r3, r3, #32
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b00      	cmp	r3, #0
 800073a:	d003      	beq.n	8000744 <MCAL_SPI_Init+0x10c>
 800073c:	89bb      	ldrh	r3, [r7, #12]
 800073e:	f043 0320 	orr.w	r3, r3, #32
 8000742:	81bb      	strh	r3, [r7, #12]
		//tempreg_CR2 |= SPI_Config->IRQ_Enable;
		if(SPIx == SPI1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <MCAL_SPI_Init+0x14c>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d106      	bne.n	800075a <MCAL_SPI_Init+0x122>
		{
			NVIC_IRQ35_SPI1_Enable();
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MCAL_SPI_Init+0x158>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <MCAL_SPI_Init+0x158>)
 8000752:	f043 0308 	orr.w	r3, r3, #8
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	e009      	b.n	800076e <MCAL_SPI_Init+0x136>
		}
		else if(SPIx == SPI2)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <MCAL_SPI_Init+0x15c>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d105      	bne.n	800076e <MCAL_SPI_Init+0x136>
		{
			NVIC_IRQ36_SPI2_Enable();
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MCAL_SPI_Init+0x158>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <MCAL_SPI_Init+0x158>)
 8000768:	f043 0310 	orr.w	r3, r3, #16
 800076c:	6013      	str	r3, [r2, #0]
		}
	}

	SPIx->SPI_CR1 = tempreg_CR1;
 800076e:	89fa      	ldrh	r2, [r7, #14]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	601a      	str	r2, [r3, #0]
	SPIx->SPI_CR2 = tempreg_CR2;
 8000774:	89ba      	ldrh	r2, [r7, #12]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	605a      	str	r2, [r3, #4]

}
 800077a:	bf00      	nop
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	40013000 	.word	0x40013000
 8000788:	20000034 	.word	0x20000034
 800078c:	40021000 	.word	0x40021000
 8000790:	e000e104 	.word	0xe000e104
 8000794:	40003800 	.word	0x40003800

08000798 <MCAL_SPI_TX_RX>:
 * @retval 			- None
 * Note				- None
 */

void MCAL_SPI_TX_RX(SPI_TypeDef* SPIx , uint16_t * pTxBuffer , SPI_Polling_Mechanism PollingEn)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	4613      	mov	r3, r2
 80007a4:	71fb      	strb	r3, [r7, #7]
	if(PollingEn == Pollingenable)
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d106      	bne.n	80007ba <MCAL_SPI_TX_RX+0x22>
		while(!(SPIx->SPI_SR & SPI_SR_TX));
 80007ac:	bf00      	nop
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d0f9      	beq.n	80007ae <MCAL_SPI_TX_RX+0x16>

	SPIx->SPI_DR = *pTxBuffer;
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	60da      	str	r2, [r3, #12]

	if(PollingEn == Pollingenable)
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d106      	bne.n	80007d8 <MCAL_SPI_TX_RX+0x40>
		while(!(SPIx->SPI_SR & SPI_SR_RXNE));
 80007ca:	bf00      	nop
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d0f9      	beq.n	80007cc <MCAL_SPI_TX_RX+0x34>

	*pTxBuffer = SPIx->SPI_DR;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	b29a      	uxth	r2, r3
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	801a      	strh	r2, [r3, #0]


}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <MCAL_SPI_GPIO_Set_Pins>:
 * @param [in] 		- SPIx : where x can be (1,2 depending on device used)
 * @retval 			- None
 * Note				- None
 */
void MCAL_SPI_GPIO_Set_Pins(SPI_TypeDef* SPIx)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;
	if(SPIx == SPI1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a73      	ldr	r2, [pc, #460]	; (80009c4 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d169      	bne.n	80008d0 <MCAL_SPI_GPIO_Set_Pins+0xe4>
				//   	PA4 : SPI1_NSS
				//   	PA5 : SPI1_SCK
				//		PA6 : SPI1_MISO
				//   	PA7 : SPI1_MOSI
		// master setup
		if(Global_SPI_Config[SPI1_Index]->Device_Mode == SPI_DEVICE_MODE_MASTER)
 80007fc:	4b72      	ldr	r3, [pc, #456]	; (80009c8 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	2b04      	cmp	r3, #4
 8000804:	d134      	bne.n	8000870 <MCAL_SPI_GPIO_Set_Pins+0x84>
		{

			// nss PA4
			switch(Global_SPI_Config[SPI1_Index]->NSS)
 8000806:	4b70      	ldr	r3, [pc, #448]	; (80009c8 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	899b      	ldrh	r3, [r3, #12]
 800080c:	2b04      	cmp	r3, #4
 800080e:	d10c      	bne.n	800082a <MCAL_SPI_GPIO_Set_Pins+0x3e>
				MCAL_GPIO_Init(GPIOA, &PinCfg);
				break;

			case SPI_NSS_Hard_Master_SS_output_enable:

				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000810:	2310      	movs	r3, #16
 8000812:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000814:	2306      	movs	r3, #6
 8000816:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000818:	2301      	movs	r3, #1
 800081a:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	486a      	ldr	r0, [pc, #424]	; (80009cc <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000824:	f7ff fe17 	bl	8000456 <MCAL_GPIO_Init>
				break;
 8000828:	bf00      	nop
			}

			//PA5 clk
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800082a:	2320      	movs	r3, #32
 800082c:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800082e:	2306      	movs	r3, #6
 8000830:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000832:	2301      	movs	r3, #1
 8000834:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4619      	mov	r1, r3
 800083c:	4863      	ldr	r0, [pc, #396]	; (80009cc <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800083e:	f7ff fe0a 	bl	8000456 <MCAL_GPIO_Init>

			// only full dublex
			//PA6 MISO in master input floating
			PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000842:	2340      	movs	r3, #64	; 0x40
 8000844:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000846:	2301      	movs	r3, #1
 8000848:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4619      	mov	r1, r3
 8000850:	485e      	ldr	r0, [pc, #376]	; (80009cc <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000852:	f7ff fe00 	bl	8000456 <MCAL_GPIO_Init>

			// PA7 MOSI in master output
			PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800085a:	2306      	movs	r3, #6
 800085c:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800085e:	2301      	movs	r3, #1
 8000860:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	4858      	ldr	r0, [pc, #352]	; (80009cc <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800086a:	f7ff fdf4 	bl	8000456 <MCAL_GPIO_Init>
			MCAL_GPIO_Init(GPIOB, &PinCfg);

		}

	}
}
 800086e:	e0a4      	b.n	80009ba <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Config[SPI1_Index]->NSS == SPI_NSS_Hard_Slave)
 8000870:	4b55      	ldr	r3, [pc, #340]	; (80009c8 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	899b      	ldrh	r3, [r3, #12]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d109      	bne.n	800088e <MCAL_SPI_GPIO_Set_Pins+0xa2>
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 800087a:	2310      	movs	r3, #16
 800087c:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800087e:	2301      	movs	r3, #1
 8000880:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4619      	mov	r1, r3
 8000888:	4850      	ldr	r0, [pc, #320]	; (80009cc <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800088a:	f7ff fde4 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800088e:	2320      	movs	r3, #32
 8000890:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000892:	2301      	movs	r3, #1
 8000894:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	4619      	mov	r1, r3
 800089c:	484b      	ldr	r0, [pc, #300]	; (80009cc <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800089e:	f7ff fdda 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80008a2:	2340      	movs	r3, #64	; 0x40
 80008a4:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008a6:	2306      	movs	r3, #6
 80008a8:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80008aa:	2301      	movs	r3, #1
 80008ac:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4619      	mov	r1, r3
 80008b4:	4845      	ldr	r0, [pc, #276]	; (80009cc <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80008b6:	f7ff fdce 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80008be:	2301      	movs	r3, #1
 80008c0:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4619      	mov	r1, r3
 80008c8:	4840      	ldr	r0, [pc, #256]	; (80009cc <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80008ca:	f7ff fdc4 	bl	8000456 <MCAL_GPIO_Init>
}
 80008ce:	e074      	b.n	80009ba <MCAL_SPI_GPIO_Set_Pins+0x1ce>
	else if(SPIx == SPI2)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a3f      	ldr	r2, [pc, #252]	; (80009d0 <MCAL_SPI_GPIO_Set_Pins+0x1e4>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d170      	bne.n	80009ba <MCAL_SPI_GPIO_Set_Pins+0x1ce>
		if(Global_SPI_Config[SPI2_Index]->Device_Mode == SPI_DEVICE_MODE_MASTER)
 80008d8:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	2b04      	cmp	r3, #4
 80008e0:	d138      	bne.n	8000954 <MCAL_SPI_GPIO_Set_Pins+0x168>
			switch(Global_SPI_Config[SPI2_Index]->NSS)
 80008e2:	4b39      	ldr	r3, [pc, #228]	; (80009c8 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	899b      	ldrh	r3, [r3, #12]
 80008e8:	2b04      	cmp	r3, #4
 80008ea:	d10d      	bne.n	8000908 <MCAL_SPI_GPIO_Set_Pins+0x11c>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80008ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f0:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008f2:	2306      	movs	r3, #6
 80008f4:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80008f6:	2301      	movs	r3, #1
 80008f8:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	4619      	mov	r1, r3
 8000900:	4834      	ldr	r0, [pc, #208]	; (80009d4 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000902:	f7ff fda8 	bl	8000456 <MCAL_GPIO_Init>
				break;
 8000906:	bf00      	nop
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090c:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800090e:	2306      	movs	r3, #6
 8000910:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000912:	2301      	movs	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	4619      	mov	r1, r3
 800091c:	482d      	ldr	r0, [pc, #180]	; (80009d4 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 800091e:	f7ff fd9a 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000922:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000926:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000928:	2301      	movs	r3, #1
 800092a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	4828      	ldr	r0, [pc, #160]	; (80009d4 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000934:	f7ff fd8f 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800093c:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800093e:	2306      	movs	r3, #6
 8000940:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000942:	2301      	movs	r3, #1
 8000944:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	4821      	ldr	r0, [pc, #132]	; (80009d4 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 800094e:	f7ff fd82 	bl	8000456 <MCAL_GPIO_Init>
}
 8000952:	e032      	b.n	80009ba <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Config[SPI1_Index]->NSS == SPI_NSS_Hard_Slave)
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	899b      	ldrh	r3, [r3, #12]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10a      	bne.n	8000974 <MCAL_SPI_GPIO_Set_Pins+0x188>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 800095e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000962:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000964:	2301      	movs	r3, #1
 8000966:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	4619      	mov	r1, r3
 800096e:	4819      	ldr	r0, [pc, #100]	; (80009d4 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000970:	f7ff fd71 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000978:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800097a:	2301      	movs	r3, #1
 800097c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	4619      	mov	r1, r3
 8000984:	4813      	ldr	r0, [pc, #76]	; (80009d4 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000986:	f7ff fd66 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 800098a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800098e:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000990:	2306      	movs	r3, #6
 8000992:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000994:	2301      	movs	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	4619      	mov	r1, r3
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80009a0:	f7ff fd59 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 80009a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009a8:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80009aa:	2301      	movs	r3, #1
 80009ac:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4619      	mov	r1, r3
 80009b4:	4807      	ldr	r0, [pc, #28]	; (80009d4 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80009b6:	f7ff fd4e 	bl	8000456 <MCAL_GPIO_Init>
}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40013000 	.word	0x40013000
 80009c8:	20000034 	.word	0x20000034
 80009cc:	40010800 	.word	0x40010800
 80009d0:	40003800 	.word	0x40003800
 80009d4:	40010c00 	.word	0x40010c00

080009d8 <SPI1_IRQHandler>:
 * =================================================================
 */


void SPI1_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE = ((SPI1->SPI_SR & (1<<1)) >> 1);
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <SPI1_IRQHandler+0x54>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	085b      	lsrs	r3, r3, #1
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	793b      	ldrb	r3, [r7, #4]
 80009ec:	f362 0300 	bfi	r3, r2, #0, #1
 80009f0:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SPI_SR & (1<<0)) >> 0);
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <SPI1_IRQHandler+0x54>)
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	793b      	ldrb	r3, [r7, #4]
 80009fe:	f362 0341 	bfi	r3, r2, #1, #1
 8000a02:	713b      	strb	r3, [r7, #4]
	irq_src.ERRiI = ((SPI1->SPI_SR & (1<<4)) >> 4);
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <SPI1_IRQHandler+0x54>)
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	091b      	lsrs	r3, r3, #4
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	793b      	ldrb	r3, [r7, #4]
 8000a12:	f362 0382 	bfi	r3, r2, #2, #1
 8000a16:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_Index]->P_IRQ_callBack(irq_src);
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <SPI1_IRQHandler+0x58>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	7938      	ldrb	r0, [r7, #4]
 8000a20:	4798      	blx	r3
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40013000 	.word	0x40013000
 8000a30:	20000034 	.word	0x20000034

08000a34 <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE = ((SPI2->SPI_SR & (1<<1)) >> 1);
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <SPI2_IRQHandler+0x54>)
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	085b      	lsrs	r3, r3, #1
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	793b      	ldrb	r3, [r7, #4]
 8000a48:	f362 0300 	bfi	r3, r2, #0, #1
 8000a4c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SPI_SR & (1<<0)) >> 0);
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <SPI2_IRQHandler+0x54>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	793b      	ldrb	r3, [r7, #4]
 8000a5a:	f362 0341 	bfi	r3, r2, #1, #1
 8000a5e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRiI = ((SPI2->SPI_SR & (1<<4)) >> 4);
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <SPI2_IRQHandler+0x54>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	091b      	lsrs	r3, r3, #4
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	793b      	ldrb	r3, [r7, #4]
 8000a6e:	f362 0382 	bfi	r3, r2, #2, #1
 8000a72:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_Index]->P_IRQ_callBack(irq_src);
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <SPI2_IRQHandler+0x58>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	7938      	ldrb	r0, [r7, #4]
 8000a7c:	4798      	blx	r3
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40003800 	.word	0x40003800
 8000a8c:	20000034 	.word	0x20000034

08000a90 <MCAL_UART_Init>:
* Note					- Now Support ASYNCH mode and Clock 8Mhz
*/
/**================================================================*/

void MCAL_UART_Init(USART_TypeDef * USARTx, UART_Config *UART_Config)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
	uint32_t pclK , BRR;
	Global_UART_Config = UART_Config;
 8000a9a:	4a73      	ldr	r2, [pc, #460]	; (8000c68 <MCAL_UART_Init+0x1d8>)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	6013      	str	r3, [r2, #0]

	if(USARTx == USART1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a72      	ldr	r2, [pc, #456]	; (8000c6c <MCAL_UART_Init+0x1dc>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d106      	bne.n	8000ab6 <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 8000aa8:	4b71      	ldr	r3, [pc, #452]	; (8000c70 <MCAL_UART_Init+0x1e0>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a70      	ldr	r2, [pc, #448]	; (8000c70 <MCAL_UART_Init+0x1e0>)
 8000aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	e014      	b.n	8000ae0 <MCAL_UART_Init+0x50>
	}
	else if(USARTx == USART2)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a6e      	ldr	r2, [pc, #440]	; (8000c74 <MCAL_UART_Init+0x1e4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d106      	bne.n	8000acc <MCAL_UART_Init+0x3c>
	{
		RCC_USART2_CLK_EN();
 8000abe:	4b6c      	ldr	r3, [pc, #432]	; (8000c70 <MCAL_UART_Init+0x1e0>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a6b      	ldr	r2, [pc, #428]	; (8000c70 <MCAL_UART_Init+0x1e0>)
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	61d3      	str	r3, [r2, #28]
 8000aca:	e009      	b.n	8000ae0 <MCAL_UART_Init+0x50>
	}
	else if(USARTx == USART3)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a6a      	ldr	r2, [pc, #424]	; (8000c78 <MCAL_UART_Init+0x1e8>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d105      	bne.n	8000ae0 <MCAL_UART_Init+0x50>
	{
		RCC_USART3_CLK_EN();
 8000ad4:	4b66      	ldr	r3, [pc, #408]	; (8000c70 <MCAL_UART_Init+0x1e0>)
 8000ad6:	69db      	ldr	r3, [r3, #28]
 8000ad8:	4a65      	ldr	r2, [pc, #404]	; (8000c70 <MCAL_UART_Init+0x1e0>)
 8000ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ade:	61d3      	str	r3, [r2, #28]
	}
	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	60da      	str	r2, [r3, #12]

	//Enable TX and RX
	//Bit 3 TE: Transmitter enable
	//Bit 2 RE: Receiver enable
	USARTx-> CR1 |= UART_Config->USART_Mode;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	7812      	ldrb	r2, [r2, #0]
 8000af4:	431a      	orrs	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	60da      	str	r2, [r3, #12]
	//PAYLOAD Width
	USARTx->CR1 |= UART_Config->Payload_Length;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	7a12      	ldrb	r2, [r2, #8]
 8000b02:	431a      	orrs	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	60da      	str	r2, [r3, #12]

	//Configuration of Parity control bit
	USARTx->CR1 |= UART_Config->Parity;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	7a52      	ldrb	r2, [r2, #9]
 8000b10:	431a      	orrs	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60da      	str	r2, [r3, #12]

	//Configure the number of stop bits
	USARTx->CR2 |= UART_Config->StopBits;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	691b      	ldr	r3, [r3, #16]
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	7a92      	ldrb	r2, [r2, #10]
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	611a      	str	r2, [r3, #16]

	//USART hardware flowControl
	USARTx->CR3 |= UART_Config->HWFlowCTRL;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	7ad2      	ldrb	r2, [r2, #11]
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	615a      	str	r2, [r3, #20]

	if(USARTx == USART1)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a4d      	ldr	r2, [pc, #308]	; (8000c6c <MCAL_UART_Init+0x1dc>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d103      	bne.n	8000b42 <MCAL_UART_Init+0xb2>
	{
		pclK = MCAL_RCC_GetPCLK2Freq();
 8000b3a:	f7ff fd69 	bl	8000610 <MCAL_RCC_GetPCLK2Freq>
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	e002      	b.n	8000b48 <MCAL_UART_Init+0xb8>
	}
	else
	{
		pclK = MCAL_RCC_GetPCLK1Freq();
 8000b42:	f7ff fd51 	bl	80005e8 <MCAL_RCC_GetPCLK1Freq>
 8000b46:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclK, UART_Config->BaudRate);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	011b      	lsls	r3, r3, #4
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b54:	0119      	lsls	r1, r3, #4
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	4413      	add	r3, r2
 8000b5e:	009a      	lsls	r2, r3, #2
 8000b60:	441a      	add	r2, r3
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	011b      	lsls	r3, r3, #4
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b78:	2064      	movs	r0, #100	; 0x64
 8000b7a:	fb00 f303 	mul.w	r3, r0, r3
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	011b      	lsls	r3, r3, #4
 8000b82:	4a3e      	ldr	r2, [pc, #248]	; (8000c7c <MCAL_UART_Init+0x1ec>)
 8000b84:	fba2 2303 	umull	r2, r3, r2, r3
 8000b88:	095b      	lsrs	r3, r3, #5
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	430b      	orrs	r3, r1
 8000b90:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	68ba      	ldr	r2, [r7, #8]
 8000b96:	609a      	str	r2, [r3, #8]

	if(UART_Config->IRQ_Enable != USART_IRQ_Disable)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	7b1b      	ldrb	r3, [r3, #12]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d05e      	beq.n	8000c5e <MCAL_UART_Init+0x1ce>
	{
		if(UART_Config->IRQ_CallBack.P_IRQ_CallBack_TC != NULL)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d005      	beq.n	8000bb4 <MCAL_UART_Init+0x124>
			USARTx->CR1 |=  (USART_IRQ_Enable_TC);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	60da      	str	r2, [r3, #12]

		if(UART_Config->IRQ_CallBack.P_IRQ_CallBack_TXE != NULL)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	691b      	ldr	r3, [r3, #16]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d005      	beq.n	8000bc8 <MCAL_UART_Init+0x138>
				USARTx->CR1 |=  (USART_IRQ_Enable_TXE);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	60da      	str	r2, [r3, #12]

		if(UART_Config->IRQ_CallBack.P_IRQ_CallBack_PE != NULL)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d005      	beq.n	8000bdc <MCAL_UART_Init+0x14c>
				USARTx->CR1 |=  (USART_IRQ_Enable_PE);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	60da      	str	r2, [r3, #12]

		if(UART_Config->IRQ_CallBack.P_IRQ_CallBack_RXNE != NULL)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d005      	beq.n	8000bf0 <MCAL_UART_Init+0x160>
				USARTx->CR1 |=  (USART_IRQ_Enable_RXNE);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	f043 0220 	orr.w	r2, r3, #32
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	60da      	str	r2, [r3, #12]


		if(USARTx == USART1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a1e      	ldr	r2, [pc, #120]	; (8000c6c <MCAL_UART_Init+0x1dc>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d10d      	bne.n	8000c14 <MCAL_UART_Init+0x184>
		{
			NVIC_IRQ37_USART1_Enable();
 8000bf8:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <MCAL_UART_Init+0x1f0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a20      	ldr	r2, [pc, #128]	; (8000c80 <MCAL_UART_Init+0x1f0>)
 8000bfe:	f043 0320 	orr.w	r3, r3, #32
 8000c02:	6013      	str	r3, [r2, #0]
			Global_I_UART[0] = UART_Config->IRQ_CallBack;
 8000c04:	4a1f      	ldr	r2, [pc, #124]	; (8000c84 <MCAL_UART_Init+0x1f4>)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	4614      	mov	r4, r2
 8000c0a:	3310      	adds	r3, #16
 8000c0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{
			NVIC_IRQ39_USART3_Enable();
			Global_I_UART[2] = UART_Config->IRQ_CallBack;
		}
	}
}
 8000c12:	e024      	b.n	8000c5e <MCAL_UART_Init+0x1ce>
		else if(USARTx == USART2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <MCAL_UART_Init+0x1e4>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d10e      	bne.n	8000c3a <MCAL_UART_Init+0x1aa>
			NVIC_IRQ38_USART2_Enable();
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MCAL_UART_Init+0x1f0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <MCAL_UART_Init+0x1f0>)
 8000c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c26:	6013      	str	r3, [r2, #0]
			Global_I_UART[1] = UART_Config->IRQ_CallBack;
 8000c28:	4a16      	ldr	r2, [pc, #88]	; (8000c84 <MCAL_UART_Init+0x1f4>)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	f102 0410 	add.w	r4, r2, #16
 8000c30:	3310      	adds	r3, #16
 8000c32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000c38:	e011      	b.n	8000c5e <MCAL_UART_Init+0x1ce>
		else if(USARTx == USART3)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <MCAL_UART_Init+0x1e8>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d10d      	bne.n	8000c5e <MCAL_UART_Init+0x1ce>
			NVIC_IRQ39_USART3_Enable();
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MCAL_UART_Init+0x1f0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <MCAL_UART_Init+0x1f0>)
 8000c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c4c:	6013      	str	r3, [r2, #0]
			Global_I_UART[2] = UART_Config->IRQ_CallBack;
 8000c4e:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <MCAL_UART_Init+0x1f4>)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	f102 0420 	add.w	r4, r2, #32
 8000c56:	3310      	adds	r3, #16
 8000c58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd90      	pop	{r4, r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000003c 	.word	0x2000003c
 8000c6c:	40013800 	.word	0x40013800
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40004400 	.word	0x40004400
 8000c78:	40004800 	.word	0x40004800
 8000c7c:	51eb851f 	.word	0x51eb851f
 8000c80:	e000e104 	.word	0xe000e104
 8000c84:	20000040 	.word	0x20000040

08000c88 <MCAL_UART_GPIO_Set_Pins>:
			NVIC_IRQ39_USART3_Disable();
		}
}

void MCAL_UART_GPIO_Set_Pins(USART_TypeDef * USARTx)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(USARTx == USART1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a2e      	ldr	r2, [pc, #184]	; (8000d4c <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d11a      	bne.n	8000cce <MCAL_UART_GPIO_Set_Pins+0x46>
		//PA9 TX
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c9c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	4619      	mov	r1, r3
 8000cac:	4828      	ldr	r0, [pc, #160]	; (8000d50 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000cae:	f7ff fbd2 	bl	8000456 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4822      	ldr	r0, [pc, #136]	; (8000d50 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000cc8:	f7ff fbc5 	bl	8000456 <MCAL_GPIO_Init>
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}

	}

}
 8000ccc:	e03a      	b.n	8000d44 <MCAL_UART_GPIO_Set_Pins+0xbc>
	else if(USARTx == USART2)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a20      	ldr	r2, [pc, #128]	; (8000d54 <MCAL_UART_GPIO_Set_Pins+0xcc>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d118      	bne.n	8000d08 <MCAL_UART_GPIO_Set_Pins+0x80>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000cda:	2306      	movs	r3, #6
 8000cdc:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4819      	ldr	r0, [pc, #100]	; (8000d50 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000cea:	f7ff fbb4 	bl	8000456 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000cee:	2308      	movs	r3, #8
 8000cf0:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000cf2:	2308      	movs	r3, #8
 8000cf4:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4813      	ldr	r0, [pc, #76]	; (8000d50 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000d02:	f7ff fba8 	bl	8000456 <MCAL_GPIO_Init>
}
 8000d06:	e01d      	b.n	8000d44 <MCAL_UART_GPIO_Set_Pins+0xbc>
	else if(USARTx == USART3)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <MCAL_UART_GPIO_Set_Pins+0xd0>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d119      	bne.n	8000d44 <MCAL_UART_GPIO_Set_Pins+0xbc>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d14:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000d16:	2306      	movs	r3, #6
 8000d18:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	4619      	mov	r1, r3
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <MCAL_UART_GPIO_Set_Pins+0xd4>)
 8000d26:	f7ff fb96 	bl	8000456 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000d2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d2e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000d30:	2308      	movs	r3, #8
 8000d32:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000d34:	2301      	movs	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4807      	ldr	r0, [pc, #28]	; (8000d5c <MCAL_UART_GPIO_Set_Pins+0xd4>)
 8000d40:	f7ff fb89 	bl	8000456 <MCAL_GPIO_Init>
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40013800 	.word	0x40013800
 8000d50:	40010800 	.word	0x40010800
 8000d54:	40004400 	.word	0x40004400
 8000d58:	40004800 	.word	0x40004800
 8000d5c:	40010c00 	.word	0x40010c00

08000d60 <MCAL_UART_SendData>:
							//When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
*/
/**================================================================*/

void MCAL_UART_SendData(USART_TypeDef * USARTx , uint16_t * pTxBuffer , enum Polling_Mechanism PollingEn )
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	71fb      	strb	r3, [r7, #7]
	//wait TXE is set
	if(PollingEn == enable)
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d106      	bne.n	8000d82 <MCAL_UART_SendData+0x22>
		while(! (USARTx->SR & (1<<7) ));
 8000d74:	bf00      	nop
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f9      	beq.n	8000d76 <MCAL_UART_SendData+0x16>
	{
		USARTx->DR = ((*pTxBuffer) & (uint16_t)0x1FF);
	}
	else
	{
		USARTx->DR = ((*pTxBuffer) & (uint16_t)0x0FF);
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	605a      	str	r2, [r3, #4]
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
	...

08000d98 <USART1_IRQHandler>:
	while(!(USARTx->SR & (1<<6)));
}


void USART1_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	if(USART1->SR & (1<<6)) { if(Global_I_UART[0].P_IRQ_CallBack_TC != NULL)   Global_I_UART[0].P_IRQ_CallBack_TC(); }
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <USART1_IRQHandler+0x70>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d006      	beq.n	8000db6 <USART1_IRQHandler+0x1e>
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <USART1_IRQHandler+0x74>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <USART1_IRQHandler+0x1e>
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <USART1_IRQHandler+0x74>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	4798      	blx	r3
	if(USART1->SR & (1<<5)) { if(Global_I_UART[0].P_IRQ_CallBack_RXNE != NULL) Global_I_UART[0].P_IRQ_CallBack_RXNE(); }
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <USART1_IRQHandler+0x70>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0320 	and.w	r3, r3, #32
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d006      	beq.n	8000dd0 <USART1_IRQHandler+0x38>
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <USART1_IRQHandler+0x74>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d002      	beq.n	8000dd0 <USART1_IRQHandler+0x38>
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <USART1_IRQHandler+0x74>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	4798      	blx	r3
	if(USART1->SR & (1<<7)) { if(Global_I_UART[0].P_IRQ_CallBack_TXE != NULL)  Global_I_UART[0].P_IRQ_CallBack_TXE(); }
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <USART1_IRQHandler+0x70>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d006      	beq.n	8000dea <USART1_IRQHandler+0x52>
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <USART1_IRQHandler+0x74>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <USART1_IRQHandler+0x52>
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <USART1_IRQHandler+0x74>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4798      	blx	r3
	if(USART1->SR & (1<<0)) { if(Global_I_UART[0].P_IRQ_CallBack_PE != NULL)   Global_I_UART[0].P_IRQ_CallBack_PE(); }
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <USART1_IRQHandler+0x70>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d006      	beq.n	8000e04 <USART1_IRQHandler+0x6c>
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <USART1_IRQHandler+0x74>)
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <USART1_IRQHandler+0x6c>
 8000dfe:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <USART1_IRQHandler+0x74>)
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	4798      	blx	r3
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40013800 	.word	0x40013800
 8000e0c:	20000040 	.word	0x20000040

08000e10 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	if(USART2->SR & (1<<6)) { if(Global_I_UART[1].P_IRQ_CallBack_TC != NULL)   Global_I_UART[1].P_IRQ_CallBack_TC(); }
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <USART2_IRQHandler+0x70>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d006      	beq.n	8000e2e <USART2_IRQHandler+0x1e>
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <USART2_IRQHandler+0x74>)
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <USART2_IRQHandler+0x1e>
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <USART2_IRQHandler+0x74>)
 8000e2a:	695b      	ldr	r3, [r3, #20]
 8000e2c:	4798      	blx	r3
	if(USART2->SR & (1<<5)) { if(Global_I_UART[1].P_IRQ_CallBack_RXNE != NULL) Global_I_UART[1].P_IRQ_CallBack_RXNE(); }
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <USART2_IRQHandler+0x70>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0320 	and.w	r3, r3, #32
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d006      	beq.n	8000e48 <USART2_IRQHandler+0x38>
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <USART2_IRQHandler+0x74>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <USART2_IRQHandler+0x38>
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <USART2_IRQHandler+0x74>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4798      	blx	r3
	if(USART2->SR & (1<<7)) { if(Global_I_UART[1].P_IRQ_CallBack_TXE != NULL)  Global_I_UART[1].P_IRQ_CallBack_TXE(); }
 8000e48:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <USART2_IRQHandler+0x70>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d006      	beq.n	8000e62 <USART2_IRQHandler+0x52>
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <USART2_IRQHandler+0x74>)
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d002      	beq.n	8000e62 <USART2_IRQHandler+0x52>
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <USART2_IRQHandler+0x74>)
 8000e5e:	691b      	ldr	r3, [r3, #16]
 8000e60:	4798      	blx	r3
	if(USART2->SR & (1<<0)) {  if(Global_I_UART[1].P_IRQ_CallBack_TXE != NULL) Global_I_UART[1].P_IRQ_CallBack_PE(); }
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <USART2_IRQHandler+0x70>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d006      	beq.n	8000e7c <USART2_IRQHandler+0x6c>
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <USART2_IRQHandler+0x74>)
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <USART2_IRQHandler+0x6c>
 8000e76:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <USART2_IRQHandler+0x74>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	4798      	blx	r3
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40004400 	.word	0x40004400
 8000e84:	20000040 	.word	0x20000040

08000e88 <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	if(USART3->SR & (1<<6)) { if(Global_I_UART[2].P_IRQ_CallBack_TC != NULL) Global_I_UART[2].P_IRQ_CallBack_TC(); }
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <USART3_IRQHandler+0x70>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d006      	beq.n	8000ea6 <USART3_IRQHandler+0x1e>
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <USART3_IRQHandler+0x74>)
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <USART3_IRQHandler+0x1e>
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <USART3_IRQHandler+0x74>)
 8000ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea4:	4798      	blx	r3
	if(USART3->SR & (1<<5)) {  if(Global_I_UART[2].P_IRQ_CallBack_RXNE != NULL) Global_I_UART[2].P_IRQ_CallBack_RXNE(); }
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <USART3_IRQHandler+0x70>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0320 	and.w	r3, r3, #32
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d006      	beq.n	8000ec0 <USART3_IRQHandler+0x38>
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <USART3_IRQHandler+0x74>)
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d002      	beq.n	8000ec0 <USART3_IRQHandler+0x38>
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <USART3_IRQHandler+0x74>)
 8000ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebe:	4798      	blx	r3
	if(USART3->SR & (1<<7)) { if(Global_I_UART[2].P_IRQ_CallBack_TXE != NULL)  Global_I_UART[2].P_IRQ_CallBack_TXE(); }
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <USART3_IRQHandler+0x70>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d006      	beq.n	8000eda <USART3_IRQHandler+0x52>
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <USART3_IRQHandler+0x74>)
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <USART3_IRQHandler+0x52>
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <USART3_IRQHandler+0x74>)
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4798      	blx	r3
	if(USART3->SR & (1<<0)) {  if(Global_I_UART[2].P_IRQ_CallBack_TXE != NULL) Global_I_UART[2].P_IRQ_CallBack_PE(); }
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <USART3_IRQHandler+0x70>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <USART3_IRQHandler+0x6c>
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <USART3_IRQHandler+0x74>)
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d002      	beq.n	8000ef4 <USART3_IRQHandler+0x6c>
 8000eee:	4b03      	ldr	r3, [pc, #12]	; (8000efc <USART3_IRQHandler+0x74>)
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	4798      	blx	r3
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40004800 	.word	0x40004800
 8000efc:	20000040 	.word	0x20000040

08000f00 <clock_init>:

#define MCU_Act_As_Slave
//#define MCU_Act_As_Mater

void clock_init()
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
	//Bit 2 IOPAEN: I/O port A clock enable
		RCC_GPIOA_CLK_EN();
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <clock_init+0x30>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <clock_init+0x30>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6193      	str	r3, [r2, #24]
	//Bit 3 IOPBEN: I/O port B clock enable
		RCC_GPIOB_CLK_EN();
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <clock_init+0x30>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <clock_init+0x30>)
 8000f16:	f043 0308 	orr.w	r3, r3, #8
 8000f1a:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <clock_init+0x30>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a03      	ldr	r2, [pc, #12]	; (8000f30 <clock_init+0x30>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6193      	str	r3, [r2, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	40021000 	.word	0x40021000

08000f34 <SPI1_IRQ_CallBack>:
}

uint16_t ch;

void SPI1_IRQ_CallBack(struct S_IRQ_SRC irq_src)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	7138      	strb	r0, [r7, #4]

	#ifdef MCU_Act_As_Slave
	if(irq_src.RXNE)
 8000f3c:	793b      	ldrb	r3, [r7, #4]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00c      	beq.n	8000f62 <SPI1_IRQ_CallBack+0x2e>
	{
		ch = 0x0f;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <SPI1_IRQ_CallBack+0x38>)
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	801a      	strh	r2, [r3, #0]
		MCAL_SPI_TX_RX(SPI1, &ch, Pollingdisable);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4906      	ldr	r1, [pc, #24]	; (8000f6c <SPI1_IRQ_CallBack+0x38>)
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <SPI1_IRQ_CallBack+0x3c>)
 8000f54:	f7ff fc20 	bl	8000798 <MCAL_SPI_TX_RX>
		MCAL_UART_SendData(USART1, &ch, enable);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4904      	ldr	r1, [pc, #16]	; (8000f6c <SPI1_IRQ_CallBack+0x38>)
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <SPI1_IRQ_CallBack+0x40>)
 8000f5e:	f7ff feff 	bl	8000d60 <MCAL_UART_SendData>
	}

	#endif

}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200000ac 	.word	0x200000ac
 8000f70:	40013000 	.word	0x40013000
 8000f74:	40013800 	.word	0x40013800

08000f78 <UART_IRQ_Callback>:




void UART_IRQ_Callback(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
	MCAL_SPI_TX_RX(SPI1, &ch, Pollingenable);
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);

#endif
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <main>:

int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b090      	sub	sp, #64	; 0x40
 8000f88:	af00      	add	r7, sp, #0
	clock_init();
 8000f8a:	f7ff ffb9 	bl	8000f00 <clock_init>
	UART_Config uartCFG;
	uartCFG.IRQ_CallBack = Default_IRQ_Cfg;
 8000f8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
	uartCFG.BaudRate = USART_BaudRate_115200;
 8000f9c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
	uartCFG.HWFlowCTRL = UART_HWFlowCTRL_NONE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uartCFG.IRQ_Enable = USART_IRQ_Enable;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uartCFG.IRQ_CallBack.P_IRQ_CallBack_RXNE = UART_IRQ_Callback;
 8000fae:	4b29      	ldr	r3, [pc, #164]	; (8001054 <main+0xd0>)
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
	uartCFG.Parity = UART_Parity_NONE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uartCFG.Payload_Length = UART_Payload_Length_8B;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uartCFG.StopBits = UART_StopBits__1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uartCFG.USART_Mode = UART_Mode_TX_RX;
 8000fc4:	230c      	movs	r3, #12
 8000fc6:	f887 3020 	strb.w	r3, [r7, #32]

	MCAL_UART_Init(USART1, &uartCFG);
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4821      	ldr	r0, [pc, #132]	; (8001058 <main+0xd4>)
 8000fd2:	f7ff fd5d 	bl	8000a90 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 8000fd6:	4820      	ldr	r0, [pc, #128]	; (8001058 <main+0xd4>)
 8000fd8:	f7ff fe56 	bl	8000c88 <MCAL_UART_GPIO_Set_Pins>

	SPI_Config SPI1CFG;

	SPI1CFG.CLKPhase = SPI_Clock_Phase_2EDGE_first_data_capture_edge;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	827b      	strh	r3, [r7, #18]
	SPI1CFG.CLKPolarity = SPI_CLKPolarity_HIGH_when_idle;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	823b      	strh	r3, [r7, #16]
	SPI1CFG.Data_Size = SPI_DataSize_8BIT;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	81fb      	strh	r3, [r7, #14]
	SPI1CFG.Frame_Format = SPI_FRAME_FORMAT_MSB_transmmitted_first;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	81bb      	strh	r3, [r7, #12]
	// default pclk = 8Mhz
	SPI1CFG.SPI_BAUDRATEPRESCALER = SPI_BAUDRATEPRESCALER_8;
 8000fec:	2310      	movs	r3, #16
 8000fee:	82fb      	strh	r3, [r7, #22]
	SPI1CFG.Communicaion_Mode = SPI_DIRECTION_2LINES;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	817b      	strh	r3, [r7, #10]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;

	#endif

	#ifdef MCU_Act_As_Slave
	SPI1CFG.Device_Mode = SPI_DEVICE_MODE_SLAVE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	813b      	strh	r3, [r7, #8]
	SPI1CFG.IRQ_Enable.ENABLE = SPI_ENABLE_IRQ;
 8000ff8:	7e3b      	ldrb	r3, [r7, #24]
 8000ffa:	f043 0310 	orr.w	r3, r3, #16
 8000ffe:	763b      	strb	r3, [r7, #24]
	SPI1CFG.IRQ_Enable.RXNE = SPI_ENABLE_IRQ;
 8001000:	7e3b      	ldrb	r3, [r7, #24]
 8001002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001006:	763b      	strb	r3, [r7, #24]
	SPI1CFG.IRQ_Enable.TXE = SPI_DISABLE_IRQ;
 8001008:	7e3b      	ldrb	r3, [r7, #24]
 800100a:	f36f 13c7 	bfc	r3, #7, #1
 800100e:	763b      	strb	r3, [r7, #24]
	SPI1CFG.IRQ_Enable.ERRiI = SPI_DISABLE_IRQ;
 8001010:	7e3b      	ldrb	r3, [r7, #24]
 8001012:	f36f 1345 	bfc	r3, #5, #1
 8001016:	763b      	strb	r3, [r7, #24]
	SPI1CFG.NSS = SPI_NSS_Hard_Slave;
 8001018:	2300      	movs	r3, #0
 800101a:	82bb      	strh	r3, [r7, #20]
	SPI1CFG.P_IRQ_callBack = SPI1_IRQ_CallBack;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <main+0xd8>)
 800101e:	61fb      	str	r3, [r7, #28]

	#endif
	MCAL_SPI_Init(SPI1, &SPI1CFG);
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	4619      	mov	r1, r3
 8001026:	480e      	ldr	r0, [pc, #56]	; (8001060 <main+0xdc>)
 8001028:	f7ff fb06 	bl	8000638 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <main+0xdc>)
 800102e:	f7ff fbdd 	bl	80007ec <MCAL_SPI_GPIO_Set_Pins>

	// configure PA4 as chip select
	GPIO_PinConfig_t PinCfg;
	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8001032:	2310      	movs	r3, #16
 8001034:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8001036:	2304      	movs	r3, #4
 8001038:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800103a:	2301      	movs	r3, #1
 800103c:	71fb      	strb	r3, [r7, #7]

	MCAL_GPIO_Init(GPIOA, &PinCfg);
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	4619      	mov	r1, r3
 8001042:	4808      	ldr	r0, [pc, #32]	; (8001064 <main+0xe0>)
 8001044:	f7ff fa07 	bl	8000456 <MCAL_GPIO_Init>
	// idle slave select as 1 high
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001048:	2201      	movs	r2, #1
 800104a:	2110      	movs	r1, #16
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <main+0xe0>)
 800104e:	f7ff fa81 	bl	8000554 <MCAL_GPIO_WritePin>

	while(1)
 8001052:	e7fe      	b.n	8001052 <main+0xce>
 8001054:	08000f79 	.word	0x08000f79
 8001058:	40013800 	.word	0x40013800
 800105c:	08000f35 	.word	0x08000f35
 8001060:	40013000 	.word	0x40013000
 8001064:	40010800 	.word	0x40010800

08001068 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800106a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800106c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001072:	490d      	ldr	r1, [pc, #52]	; (80010a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <LoopForever+0xe>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001088:	4c0a      	ldr	r4, [pc, #40]	; (80010b4 <LoopForever+0x16>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001096:	f000 f811 	bl	80010bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800109a:	f7ff ff73 	bl	8000f84 <main>

0800109e <LoopForever>:

LoopForever:
    b LoopForever
 800109e:	e7fe      	b.n	800109e <LoopForever>
  ldr   r0, =_estack
 80010a0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80010ac:	08001124 	.word	0x08001124
  ldr r2, =_sbss
 80010b0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80010b4:	200000b0 	.word	0x200000b0

080010b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC1_2_IRQHandler>
	...

080010bc <__libc_init_array>:
 80010bc:	b570      	push	{r4, r5, r6, lr}
 80010be:	2500      	movs	r5, #0
 80010c0:	4e0c      	ldr	r6, [pc, #48]	; (80010f4 <__libc_init_array+0x38>)
 80010c2:	4c0d      	ldr	r4, [pc, #52]	; (80010f8 <__libc_init_array+0x3c>)
 80010c4:	1ba4      	subs	r4, r4, r6
 80010c6:	10a4      	asrs	r4, r4, #2
 80010c8:	42a5      	cmp	r5, r4
 80010ca:	d109      	bne.n	80010e0 <__libc_init_array+0x24>
 80010cc:	f000 f81a 	bl	8001104 <_init>
 80010d0:	2500      	movs	r5, #0
 80010d2:	4e0a      	ldr	r6, [pc, #40]	; (80010fc <__libc_init_array+0x40>)
 80010d4:	4c0a      	ldr	r4, [pc, #40]	; (8001100 <__libc_init_array+0x44>)
 80010d6:	1ba4      	subs	r4, r4, r6
 80010d8:	10a4      	asrs	r4, r4, #2
 80010da:	42a5      	cmp	r5, r4
 80010dc:	d105      	bne.n	80010ea <__libc_init_array+0x2e>
 80010de:	bd70      	pop	{r4, r5, r6, pc}
 80010e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010e4:	4798      	blx	r3
 80010e6:	3501      	adds	r5, #1
 80010e8:	e7ee      	b.n	80010c8 <__libc_init_array+0xc>
 80010ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010ee:	4798      	blx	r3
 80010f0:	3501      	adds	r5, #1
 80010f2:	e7f2      	b.n	80010da <__libc_init_array+0x1e>
 80010f4:	0800111c 	.word	0x0800111c
 80010f8:	0800111c 	.word	0x0800111c
 80010fc:	0800111c 	.word	0x0800111c
 8001100:	08001120 	.word	0x08001120

08001104 <_init>:
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001106:	bf00      	nop
 8001108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800110a:	bc08      	pop	{r3}
 800110c:	469e      	mov	lr, r3
 800110e:	4770      	bx	lr

08001110 <_fini>:
 8001110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001112:	bf00      	nop
 8001114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001116:	bc08      	pop	{r3}
 8001118:	469e      	mov	lr, r3
 800111a:	4770      	bx	lr
