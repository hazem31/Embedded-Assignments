
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b04  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c34  08000c34  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c34  08000c34  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000c34  08000c34  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c34  08000c34  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c34  08000c34  00010c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c38  08000c38  00010c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000018  08000c54  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08000c54  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004165  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a69  00000000  00000000  000241a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000ab0  00000000  00000000  00024c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d8  00000000  00000000  000256c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000180  00000000  00000000  00025898  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002855  00000000  00000000  00025a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001ee8  00000000  00000000  0002826d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a504  00000000  00000000  0002a155  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00034659  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005bc  00000000  00000000  000346d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c1c 	.word	0x08000c1c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	08000c1c 	.word	0x08000c1c

08000170 <EXTI0_IRQHandler>:




void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	// clear the bit in the pending register
	EXTI->PR |= (1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	// call the CallBack Function
	GP_IRQ_callBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000068 	.word	0x20000068

08000194 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0

	EXTI->PR |= (1<<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000068 	.word	0x20000068

080001b8 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0

	EXTI->PR |= (1<<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3

}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000068 	.word	0x20000068

080001dc <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0

	EXTI->PR |= (1<<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3

}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000068 	.word	0x20000068

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0

	EXTI->PR |= (1<<4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3

}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000068 	.word	0x20000068

08000224 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1<<5) ) { EXTI->PR |= (1<<5) ; GP_IRQ_callBack[5](); }
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if (EXTI->PR & (1<<6) ) { EXTI->PR |= (1<<6) ; GP_IRQ_callBack[6](); }
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if (EXTI->PR & (1<<7) ) { EXTI->PR |= (1<<7) ; GP_IRQ_callBack[7](); }
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if (EXTI->PR & (1<<8) ) { EXTI->PR |= (1<<8) ; GP_IRQ_callBack[8](); }
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if (EXTI->PR & (1<<9) ) { EXTI->PR |= (1<<9) ; GP_IRQ_callBack[9](); }
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000068 	.word	0x20000068

080002cc <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1<<10) ) { EXTI->PR |= (1<<10) ; GP_IRQ_callBack[10](); }
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if (EXTI->PR & (1<<11) ) { EXTI->PR |= (1<<11) ; GP_IRQ_callBack[11](); }
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if (EXTI->PR & (1<<12) ) { EXTI->PR |= (1<<12) ; GP_IRQ_callBack[12](); }
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if (EXTI->PR & (1<<13) ) { EXTI->PR |= (1<<13) ; GP_IRQ_callBack[13](); }
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if (EXTI->PR & (1<<14) ) { EXTI->PR |= (1<<14) ; GP_IRQ_callBack[14](); }
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if (EXTI->PR & (1<<15) ) { EXTI->PR |= (1<<15) ; GP_IRQ_callBack[15](); }
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000068 	.word	0x20000068

08000390 <Get_CRLH_Position>:

#include "Stm32_F103C6_gpio_driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <Get_CRLH_Position+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <Get_CRLH_Position+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <Get_CRLH_Position+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <Get_CRLH_Position+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <Get_CRLH_Position+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <Get_CRLH_Position+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <Get_CRLH_Position+0x7a>
 80003b8:	e047      	b.n	800044a <Get_CRLH_Position+0xba>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <Get_CRLH_Position+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <Get_CRLH_Position+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <Get_CRLH_Position+0x8a>
 80003c6:	e040      	b.n	800044a <Get_CRLH_Position+0xba>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d033      	beq.n	8000436 <Get_CRLH_Position+0xa6>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <Get_CRLH_Position+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d029      	beq.n	800042e <Get_CRLH_Position+0x9e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d028      	beq.n	8000432 <Get_CRLH_Position+0xa2>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d021      	beq.n	800042a <Get_CRLH_Position+0x9a>
 80003e6:	e030      	b.n	800044a <Get_CRLH_Position+0xba>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d027      	beq.n	800043e <Get_CRLH_Position+0xae>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <Get_CRLH_Position+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d01f      	beq.n	800043a <Get_CRLH_Position+0xaa>
 80003fa:	e026      	b.n	800044a <Get_CRLH_Position+0xba>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d01f      	beq.n	8000442 <Get_CRLH_Position+0xb2>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d01e      	beq.n	8000446 <Get_CRLH_Position+0xb6>
 8000408:	e01f      	b.n	800044a <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 800040a:	2300      	movs	r3, #0
 800040c:	e01e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 800040e:	2304      	movs	r3, #4
 8000410:	e01c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2:
		return 8 ;
 8000412:	2308      	movs	r3, #8
 8000414:	e01a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3:
		return 12 ;
 8000416:	230c      	movs	r3, #12
 8000418:	e018      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 800041a:	2310      	movs	r3, #16
 800041c:	e016      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 800041e:	2314      	movs	r3, #20
 8000420:	e014      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 8000422:	2318      	movs	r3, #24
 8000424:	e012      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 8000426:	231c      	movs	r3, #28
 8000428:	e010      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_8:
		return 0 ;
 800042a:	2300      	movs	r3, #0
 800042c:	e00e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 800042e:	2304      	movs	r3, #4
 8000430:	e00c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 8000432:	2308      	movs	r3, #8
 8000434:	e00a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 8000436:	230c      	movs	r3, #12
 8000438:	e008      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 800043a:	2310      	movs	r3, #16
 800043c:	e006      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 800043e:	2314      	movs	r3, #20
 8000440:	e004      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 8000442:	2318      	movs	r3, #24
 8000444:	e002      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 8000446:	231c      	movs	r3, #28
 8000448:	e000      	b.n	800044c <Get_CRLH_Position+0xbc>



	}

	return 0 ;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <MCAL_GPIO_Init>:
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig)
{
 8000456:	b590      	push	{r4, r7, lr}
 8000458:	b085      	sub	sp, #20
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL ;
 8000460:	2300      	movs	r3, #0
 8000462:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0 ;
 8000464:	2300      	movs	r3, #0
 8000466:	73fb      	strb	r3, [r7, #15]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 )?  &GPIOx->CRL : &GPIOx->CRH ;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	2bff      	cmp	r3, #255	; 0xff
 800046e:	d801      	bhi.n	8000474 <MCAL_GPIO_Init+0x1e>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	e001      	b.n	8000478 <MCAL_GPIO_Init+0x22>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3304      	adds	r3, #4
 8000478:	60bb      	str	r3, [r7, #8]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff86 	bl	8000390 <Get_CRLH_Position>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	230f      	movs	r3, #15
 800048a:	4093      	lsls	r3, r2
 800048c:	43da      	mvns	r2, r3
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	401a      	ands	r2, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if (  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	2b07      	cmp	r3, #7
 800049e:	d00b      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	2b06      	cmp	r3, #6
 80004a6:	d007      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	789b      	ldrb	r3, [r3, #2]
 80004ac:	2b05      	cmp	r3, #5
 80004ae:	d003      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	789b      	ldrb	r3, [r3, #2]
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d10e      	bne.n	80004d6 <MCAL_GPIO_Init+0x80>
	{
		//Set  CNF8[1:0] MODE8[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f ) ;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	3b04      	subs	r3, #4
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	b25a      	sxtb	r2, r3
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	78db      	ldrb	r3, [r3, #3]
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	4313      	orrs	r3, r2
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	f003 030f 	and.w	r3, r3, #15
 80004d2:	73fb      	strb	r3, [r7, #15]
 80004d4:	e02c      	b.n	8000530 <MCAL_GPIO_Init+0xda>

	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) ||  (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d003      	beq.n	80004e6 <MCAL_GPIO_Init+0x90>
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	789b      	ldrb	r3, [r3, #2]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d107      	bne.n	80004f6 <MCAL_GPIO_Init+0xa0>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((PinConfig->GPIO_MODE  ) << 2) | 0x0) & 0x0f ) ;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	789b      	ldrb	r3, [r3, #2]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	f003 030f 	and.w	r3, r3, #15
 80004f2:	73fb      	strb	r3, [r7, #15]
 80004f4:	e01c      	b.n	8000530 <MCAL_GPIO_Init+0xda>

		}else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	789b      	ldrb	r3, [r3, #2]
 80004fa:	2b08      	cmp	r3, #8
 80004fc:	d102      	bne.n	8000504 <MCAL_GPIO_Init+0xae>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO  ) << 2) | 0x0) & 0x0f ) ;
 80004fe:	2304      	movs	r3, #4
 8000500:	73fb      	strb	r3, [r7, #15]
 8000502:	e015      	b.n	8000530 <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU  ) << 2) | 0x0) & 0x0f ) ;
 8000504:	2308      	movs	r3, #8
 8000506:	73fb      	strb	r3, [r7, #15]

			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	789b      	ldrb	r3, [r3, #2]
 800050c:	2b02      	cmp	r3, #2
 800050e:	d107      	bne.n	8000520 <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	8812      	ldrh	r2, [r2, #0]
 8000518:	431a      	orrs	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	e007      	b.n	8000530 <MCAL_GPIO_Init+0xda>

			}else
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	8812      	ldrh	r2, [r2, #0]
 8000528:	43d2      	mvns	r2, r2
 800052a:	401a      	ands	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60da      	str	r2, [r3, #12]

		}

	}
// write on the CRL or CRH
	(*configregister) |=  ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)   );
 8000530:	7bfc      	ldrb	r4, [r7, #15]
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff2a 	bl	8000390 <Get_CRLH_Position>
 800053c:	4603      	mov	r3, r0
 800053e:	fa04 f203 	lsl.w	r2, r4, r3
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	431a      	orrs	r2, r3
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	601a      	str	r2, [r3, #0]

}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	bd90      	pop	{r4, r7, pc}

08000554 <MCAL_RCC_GetSYS_CLKFreq>:
//1111: SYSCLK divided by 512

uint8_t AHBPrescTable[16] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};

uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable
	switch((RCC->CFGR>>2) & 0b11)
 8000558:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <MCAL_RCC_GetSYS_CLKFreq+0x30>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	089b      	lsrs	r3, r3, #2
 800055e:	f003 0303 	and.w	r3, r3, #3
 8000562:	2b01      	cmp	r3, #1
 8000564:	d006      	beq.n	8000574 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 8000566:	2b01      	cmp	r3, #1
 8000568:	d302      	bcc.n	8000570 <MCAL_RCC_GetSYS_CLKFreq+0x1c>
 800056a:	2b02      	cmp	r3, #2
 800056c:	d004      	beq.n	8000578 <MCAL_RCC_GetSYS_CLKFreq+0x24>
 800056e:	e005      	b.n	800057c <MCAL_RCC_GetSYS_CLKFreq+0x28>
	{
	case 0:
		return HSI_RC_CLK;
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 8000572:	e003      	b.n	800057c <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;

	case 1:
		return HSE_Clock;
 8000574:	2300      	movs	r3, #0
 8000576:	e001      	b.n	800057c <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;

	case 2:
		return 16000000;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 800057a:	e7ff      	b.n	800057c <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;

	}
}
 800057c:	4618      	mov	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40021000 	.word	0x40021000
 8000588:	007a1200 	.word	0x007a1200
 800058c:	00f42400 	.word	0x00f42400

08000590 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return MCAL_RCC_GetSYS_CLKFreq()>>AHBPrescTable[((RCC->CFGR>>4) & 0b111)];
 8000594:	f7ff ffde 	bl	8000554 <MCAL_RCC_GetSYS_CLKFreq>
 8000598:	4601      	mov	r1, r0
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <MCAL_RCC_GetHCLKFreq+0x20>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	091b      	lsrs	r3, r3, #4
 80005a0:	f003 0307 	and.w	r3, r3, #7
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <MCAL_RCC_GetHCLKFreq+0x24>)
 80005a6:	5cd3      	ldrb	r3, [r2, r3]
 80005a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	20000008 	.word	0x20000008

080005b8 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return MCAL_RCC_GetHCLKFreq()>>APBPrescTable[((RCC->CFGR>>8) & 0b111)];
 80005bc:	f7ff ffe8 	bl	8000590 <MCAL_RCC_GetHCLKFreq>
 80005c0:	4601      	mov	r1, r0
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <MCAL_RCC_GetPCLK1Freq+0x20>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	0a1b      	lsrs	r3, r3, #8
 80005c8:	f003 0307 	and.w	r3, r3, #7
 80005cc:	4a03      	ldr	r2, [pc, #12]	; (80005dc <MCAL_RCC_GetPCLK1Freq+0x24>)
 80005ce:	5cd3      	ldrb	r3, [r2, r3]
 80005d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000
 80005dc:	20000000 	.word	0x20000000

080005e0 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	// Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return MCAL_RCC_GetHCLKFreq()>>APBPrescTable[((RCC->CFGR>>11) & 0b111)];
 80005e4:	f7ff ffd4 	bl	8000590 <MCAL_RCC_GetHCLKFreq>
 80005e8:	4601      	mov	r1, r0
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <MCAL_RCC_GetPCLK2Freq+0x20>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	0adb      	lsrs	r3, r3, #11
 80005f0:	f003 0307 	and.w	r3, r3, #7
 80005f4:	4a03      	ldr	r2, [pc, #12]	; (8000604 <MCAL_RCC_GetPCLK2Freq+0x24>)
 80005f6:	5cd3      	ldrb	r3, [r2, r3]
 80005f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	20000000 	.word	0x20000000

08000608 <MCAL_UART_Init>:
* Note					- Now Support ASYNCH mode and Clock 8Mhz
*/
/**================================================================*/

void MCAL_UART_Init(USART_TypeDef * USARTx, UART_Config *UART_Config)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	uint32_t pclK , BRR;
	Global_UART_Config = UART_Config;
 8000612:	4a73      	ldr	r2, [pc, #460]	; (80007e0 <MCAL_UART_Init+0x1d8>)
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	6013      	str	r3, [r2, #0]

	if(USARTx == USART1)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a72      	ldr	r2, [pc, #456]	; (80007e4 <MCAL_UART_Init+0x1dc>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 8000620:	4b71      	ldr	r3, [pc, #452]	; (80007e8 <MCAL_UART_Init+0x1e0>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a70      	ldr	r2, [pc, #448]	; (80007e8 <MCAL_UART_Init+0x1e0>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	e014      	b.n	8000658 <MCAL_UART_Init+0x50>
	}
	else if(USARTx == USART2)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a6e      	ldr	r2, [pc, #440]	; (80007ec <MCAL_UART_Init+0x1e4>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d106      	bne.n	8000644 <MCAL_UART_Init+0x3c>
	{
		RCC_USART2_CLK_EN();
 8000636:	4b6c      	ldr	r3, [pc, #432]	; (80007e8 <MCAL_UART_Init+0x1e0>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a6b      	ldr	r2, [pc, #428]	; (80007e8 <MCAL_UART_Init+0x1e0>)
 800063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	e009      	b.n	8000658 <MCAL_UART_Init+0x50>
	}
	else if(USARTx == USART3)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a6a      	ldr	r2, [pc, #424]	; (80007f0 <MCAL_UART_Init+0x1e8>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d105      	bne.n	8000658 <MCAL_UART_Init+0x50>
	{
		RCC_USART3_CLK_EN();
 800064c:	4b66      	ldr	r3, [pc, #408]	; (80007e8 <MCAL_UART_Init+0x1e0>)
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	4a65      	ldr	r2, [pc, #404]	; (80007e8 <MCAL_UART_Init+0x1e0>)
 8000652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000656:	61d3      	str	r3, [r2, #28]
	}
	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	60da      	str	r2, [r3, #12]

	//Enable TX and RX
	//Bit 3 TE: Transmitter enable
	//Bit 2 RE: Receiver enable
	USARTx-> CR1 |= UART_Config->USART_Mode;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	683a      	ldr	r2, [r7, #0]
 800066a:	7812      	ldrb	r2, [r2, #0]
 800066c:	431a      	orrs	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	60da      	str	r2, [r3, #12]
	//PAYLOAD Width
	USARTx->CR1 |= UART_Config->Payload_Length;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	7a12      	ldrb	r2, [r2, #8]
 800067a:	431a      	orrs	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	60da      	str	r2, [r3, #12]

	//Configuration of Parity control bit
	USARTx->CR1 |= UART_Config->Parity;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	7a52      	ldrb	r2, [r2, #9]
 8000688:	431a      	orrs	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	60da      	str	r2, [r3, #12]

	//Configure the number of stop bits
	USARTx->CR2 |= UART_Config->StopBits;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	691b      	ldr	r3, [r3, #16]
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	7a92      	ldrb	r2, [r2, #10]
 8000696:	431a      	orrs	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	611a      	str	r2, [r3, #16]

	//USART hardware flowControl
	USARTx->CR3 |= UART_Config->HWFlowCTRL;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	7ad2      	ldrb	r2, [r2, #11]
 80006a4:	431a      	orrs	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	615a      	str	r2, [r3, #20]

	if(USARTx == USART1)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a4d      	ldr	r2, [pc, #308]	; (80007e4 <MCAL_UART_Init+0x1dc>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d103      	bne.n	80006ba <MCAL_UART_Init+0xb2>
	{
		pclK = MCAL_RCC_GetPCLK2Freq();
 80006b2:	f7ff ff95 	bl	80005e0 <MCAL_RCC_GetPCLK2Freq>
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	e002      	b.n	80006c0 <MCAL_UART_Init+0xb8>
	}
	else
	{
		pclK = MCAL_RCC_GetPCLK1Freq();
 80006ba:	f7ff ff7d 	bl	80005b8 <MCAL_RCC_GetPCLK1Freq>
 80006be:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclK, UART_Config->BaudRate);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006cc:	0119      	lsls	r1, r3, #4
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	4613      	mov	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4413      	add	r3, r2
 80006d6:	009a      	lsls	r2, r3, #2
 80006d8:	441a      	add	r2, r3
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80006f0:	2064      	movs	r0, #100	; 0x64
 80006f2:	fb00 f303 	mul.w	r3, r0, r3
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	4a3e      	ldr	r2, [pc, #248]	; (80007f4 <MCAL_UART_Init+0x1ec>)
 80006fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000700:	095b      	lsrs	r3, r3, #5
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	430b      	orrs	r3, r1
 8000708:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	609a      	str	r2, [r3, #8]

	if(UART_Config->IRQ_Enable != USART_IRQ_Disable)
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	7b1b      	ldrb	r3, [r3, #12]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d05e      	beq.n	80007d6 <MCAL_UART_Init+0x1ce>
	{
		if(UART_Config->IRQ_CallBack.P_IRQ_CallBack_TC != NULL)
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d005      	beq.n	800072c <MCAL_UART_Init+0x124>
			USARTx->CR1 |=  (USART_IRQ_Enable_TC);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	60da      	str	r2, [r3, #12]

		if(UART_Config->IRQ_CallBack.P_IRQ_CallBack_TXE != NULL)
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	691b      	ldr	r3, [r3, #16]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d005      	beq.n	8000740 <MCAL_UART_Init+0x138>
				USARTx->CR1 |=  (USART_IRQ_Enable_TXE);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	60da      	str	r2, [r3, #12]

		if(UART_Config->IRQ_CallBack.P_IRQ_CallBack_PE != NULL)
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d005      	beq.n	8000754 <MCAL_UART_Init+0x14c>
				USARTx->CR1 |=  (USART_IRQ_Enable_PE);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	60da      	str	r2, [r3, #12]

		if(UART_Config->IRQ_CallBack.P_IRQ_CallBack_RXNE != NULL)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d005      	beq.n	8000768 <MCAL_UART_Init+0x160>
				USARTx->CR1 |=  (USART_IRQ_Enable_RXNE);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	f043 0220 	orr.w	r2, r3, #32
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	60da      	str	r2, [r3, #12]


		if(USARTx == USART1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a1e      	ldr	r2, [pc, #120]	; (80007e4 <MCAL_UART_Init+0x1dc>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d10d      	bne.n	800078c <MCAL_UART_Init+0x184>
		{
			NVIC_IRQ37_USART1_Enable();
 8000770:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MCAL_UART_Init+0x1f0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a20      	ldr	r2, [pc, #128]	; (80007f8 <MCAL_UART_Init+0x1f0>)
 8000776:	f043 0320 	orr.w	r3, r3, #32
 800077a:	6013      	str	r3, [r2, #0]
			Global_I_UART[0] = UART_Config->IRQ_CallBack;
 800077c:	4a1f      	ldr	r2, [pc, #124]	; (80007fc <MCAL_UART_Init+0x1f4>)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	4614      	mov	r4, r2
 8000782:	3310      	adds	r3, #16
 8000784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000786:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{
			NVIC_IRQ39_USART3_Enable();
			Global_I_UART[2] = UART_Config->IRQ_CallBack;
		}
	}
}
 800078a:	e024      	b.n	80007d6 <MCAL_UART_Init+0x1ce>
		else if(USARTx == USART2)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <MCAL_UART_Init+0x1e4>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d10e      	bne.n	80007b2 <MCAL_UART_Init+0x1aa>
			NVIC_IRQ38_USART2_Enable();
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MCAL_UART_Init+0x1f0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a17      	ldr	r2, [pc, #92]	; (80007f8 <MCAL_UART_Init+0x1f0>)
 800079a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800079e:	6013      	str	r3, [r2, #0]
			Global_I_UART[1] = UART_Config->IRQ_CallBack;
 80007a0:	4a16      	ldr	r2, [pc, #88]	; (80007fc <MCAL_UART_Init+0x1f4>)
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	f102 0410 	add.w	r4, r2, #16
 80007a8:	3310      	adds	r3, #16
 80007aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80007b0:	e011      	b.n	80007d6 <MCAL_UART_Init+0x1ce>
		else if(USARTx == USART3)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <MCAL_UART_Init+0x1e8>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10d      	bne.n	80007d6 <MCAL_UART_Init+0x1ce>
			NVIC_IRQ39_USART3_Enable();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MCAL_UART_Init+0x1f0>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <MCAL_UART_Init+0x1f0>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6013      	str	r3, [r2, #0]
			Global_I_UART[2] = UART_Config->IRQ_CallBack;
 80007c6:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <MCAL_UART_Init+0x1f4>)
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	f102 0420 	add.w	r4, r2, #32
 80007ce:	3310      	adds	r3, #16
 80007d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd90      	pop	{r4, r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000034 	.word	0x20000034
 80007e4:	40013800 	.word	0x40013800
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40004400 	.word	0x40004400
 80007f0:	40004800 	.word	0x40004800
 80007f4:	51eb851f 	.word	0x51eb851f
 80007f8:	e000e104 	.word	0xe000e104
 80007fc:	20000038 	.word	0x20000038

08000800 <MCAL_UART_GPIO_Set_Pins>:
			NVIC_IRQ39_USART3_Disable();
		}
}

void MCAL_UART_GPIO_Set_Pins(USART_TypeDef * USARTx)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(USARTx == USART1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a2e      	ldr	r2, [pc, #184]	; (80008c4 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d11a      	bne.n	8000846 <MCAL_UART_GPIO_Set_Pins+0x46>
		//PA9 TX
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000814:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000816:	2306      	movs	r3, #6
 8000818:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800081a:	2301      	movs	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	4619      	mov	r1, r3
 8000824:	4828      	ldr	r0, [pc, #160]	; (80008c8 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000826:	f7ff fe16 	bl	8000456 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800082a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000830:	2308      	movs	r3, #8
 8000832:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000834:	2301      	movs	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	4619      	mov	r1, r3
 800083e:	4822      	ldr	r0, [pc, #136]	; (80008c8 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000840:	f7ff fe09 	bl	8000456 <MCAL_GPIO_Init>
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}

	}

}
 8000844:	e03a      	b.n	80008bc <MCAL_UART_GPIO_Set_Pins+0xbc>
	else if(USARTx == USART2)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a20      	ldr	r2, [pc, #128]	; (80008cc <MCAL_UART_GPIO_Set_Pins+0xcc>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d118      	bne.n	8000880 <MCAL_UART_GPIO_Set_Pins+0x80>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800084e:	2304      	movs	r3, #4
 8000850:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000852:	2306      	movs	r3, #6
 8000854:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000856:	2301      	movs	r3, #1
 8000858:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	4619      	mov	r1, r3
 8000860:	4819      	ldr	r0, [pc, #100]	; (80008c8 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000862:	f7ff fdf8 	bl	8000456 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000866:	2308      	movs	r3, #8
 8000868:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 800086a:	2308      	movs	r3, #8
 800086c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800086e:	2301      	movs	r3, #1
 8000870:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	4619      	mov	r1, r3
 8000878:	4813      	ldr	r0, [pc, #76]	; (80008c8 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 800087a:	f7ff fdec 	bl	8000456 <MCAL_GPIO_Init>
}
 800087e:	e01d      	b.n	80008bc <MCAL_UART_GPIO_Set_Pins+0xbc>
	else if(USARTx == USART3)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a13      	ldr	r2, [pc, #76]	; (80008d0 <MCAL_UART_GPIO_Set_Pins+0xd0>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d119      	bne.n	80008bc <MCAL_UART_GPIO_Set_Pins+0xbc>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800088e:	2306      	movs	r3, #6
 8000890:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000892:	2301      	movs	r3, #1
 8000894:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	4619      	mov	r1, r3
 800089c:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MCAL_UART_GPIO_Set_Pins+0xd4>)
 800089e:	f7ff fdda 	bl	8000456 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80008a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008a6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80008a8:	2308      	movs	r3, #8
 80008aa:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80008ac:	2301      	movs	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4619      	mov	r1, r3
 80008b6:	4807      	ldr	r0, [pc, #28]	; (80008d4 <MCAL_UART_GPIO_Set_Pins+0xd4>)
 80008b8:	f7ff fdcd 	bl	8000456 <MCAL_GPIO_Init>
}
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40013800 	.word	0x40013800
 80008c8:	40010800 	.word	0x40010800
 80008cc:	40004400 	.word	0x40004400
 80008d0:	40004800 	.word	0x40004800
 80008d4:	40010c00 	.word	0x40010c00

080008d8 <MCAL_UART_SendData>:
							//When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
*/
/**================================================================*/

void MCAL_UART_SendData(USART_TypeDef * USARTx , uint16_t * pTxBuffer , enum Polling_Mechanism PollingEn )
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	4613      	mov	r3, r2
 80008e4:	71fb      	strb	r3, [r7, #7]
	//wait TXE is set
	if(PollingEn == enable)
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d106      	bne.n	80008fa <MCAL_UART_SendData+0x22>
		while(! (USARTx->SR & (1<<7) ));
 80008ec:	bf00      	nop
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d0f9      	beq.n	80008ee <MCAL_UART_SendData+0x16>
	{
		USARTx->DR = ((*pTxBuffer) & (uint16_t)0x1FF);
	}
	else
	{
		USARTx->DR = ((*pTxBuffer) & (uint16_t)0x0FF);
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	605a      	str	r2, [r3, #4]
	}
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
	...

08000910 <MCAL_UART_RecieveData>:

void MCAL_UART_RecieveData(USART_TypeDef * USARTx , uint16_t * pTxBuffer , enum Polling_Mechanism PollingEn )
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	4613      	mov	r3, r2
 800091c:	71fb      	strb	r3, [r7, #7]
	if(PollingEn == enable)
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d106      	bne.n	8000932 <MCAL_UART_RecieveData+0x22>
		while(!(USARTx->SR & 1<<5));
 8000924:	bf00      	nop
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f003 0320 	and.w	r3, r3, #32
 800092e:	2b00      	cmp	r3, #0
 8000930:	d0f9      	beq.n	8000926 <MCAL_UART_RecieveData+0x16>
			*pTxBuffer = ((uint16_t)USARTx->DR & (uint16_t)0xFF);
		}
	}
	else
	{
		if(Global_UART_Config->Parity == UART_Parity_NONE)
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <MCAL_UART_RecieveData+0x58>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	7a5b      	ldrb	r3, [r3, #9]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d107      	bne.n	800094c <MCAL_UART_RecieveData+0x3c>
		{

			*pTxBuffer = ((uint16_t)USARTx->DR & (uint16_t)0xFF);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	b29b      	uxth	r3, r3
 8000942:	b2db      	uxtb	r3, r3
 8000944:	b29a      	uxth	r2, r3
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	801a      	strh	r2, [r3, #0]
		}

	}


}
 800094a:	e007      	b.n	800095c <MCAL_UART_RecieveData+0x4c>
			*pTxBuffer = ((uint16_t)USARTx->DR & (uint16_t)0x7F);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	b29b      	uxth	r3, r3
 8000952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000956:	b29a      	uxth	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	801a      	strh	r2, [r3, #0]
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000034 	.word	0x20000034

0800096c <USART1_IRQHandler>:
	while(!(USARTx->SR & (1<<6)));
}


void USART1_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	if(USART1->SR & (1<<6)) { if(Global_I_UART[0].P_IRQ_CallBack_TC != NULL)   Global_I_UART[0].P_IRQ_CallBack_TC(); }
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <USART1_IRQHandler+0x70>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000978:	2b00      	cmp	r3, #0
 800097a:	d006      	beq.n	800098a <USART1_IRQHandler+0x1e>
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <USART1_IRQHandler+0x74>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <USART1_IRQHandler+0x1e>
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <USART1_IRQHandler+0x74>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	4798      	blx	r3
	if(USART1->SR & (1<<5)) { if(Global_I_UART[0].P_IRQ_CallBack_RXNE != NULL) Global_I_UART[0].P_IRQ_CallBack_RXNE(); }
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <USART1_IRQHandler+0x70>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f003 0320 	and.w	r3, r3, #32
 8000992:	2b00      	cmp	r3, #0
 8000994:	d006      	beq.n	80009a4 <USART1_IRQHandler+0x38>
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <USART1_IRQHandler+0x74>)
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <USART1_IRQHandler+0x38>
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <USART1_IRQHandler+0x74>)
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	4798      	blx	r3
	if(USART1->SR & (1<<7)) { if(Global_I_UART[0].P_IRQ_CallBack_TXE != NULL)  Global_I_UART[0].P_IRQ_CallBack_TXE(); }
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <USART1_IRQHandler+0x70>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d006      	beq.n	80009be <USART1_IRQHandler+0x52>
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <USART1_IRQHandler+0x74>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d002      	beq.n	80009be <USART1_IRQHandler+0x52>
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <USART1_IRQHandler+0x74>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4798      	blx	r3
	if(USART1->SR & (1<<0)) { if(Global_I_UART[0].P_IRQ_CallBack_PE != NULL)   Global_I_UART[0].P_IRQ_CallBack_PE(); }
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <USART1_IRQHandler+0x70>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d006      	beq.n	80009d8 <USART1_IRQHandler+0x6c>
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <USART1_IRQHandler+0x74>)
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <USART1_IRQHandler+0x6c>
 80009d2:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <USART1_IRQHandler+0x74>)
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	4798      	blx	r3
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40013800 	.word	0x40013800
 80009e0:	20000038 	.word	0x20000038

080009e4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	if(USART2->SR & (1<<6)) { if(Global_I_UART[1].P_IRQ_CallBack_TC != NULL)   Global_I_UART[1].P_IRQ_CallBack_TC(); }
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <USART2_IRQHandler+0x70>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d006      	beq.n	8000a02 <USART2_IRQHandler+0x1e>
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <USART2_IRQHandler+0x74>)
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d002      	beq.n	8000a02 <USART2_IRQHandler+0x1e>
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <USART2_IRQHandler+0x74>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	4798      	blx	r3
	if(USART2->SR & (1<<5)) { if(Global_I_UART[1].P_IRQ_CallBack_RXNE != NULL) Global_I_UART[1].P_IRQ_CallBack_RXNE(); }
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <USART2_IRQHandler+0x70>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f003 0320 	and.w	r3, r3, #32
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d006      	beq.n	8000a1c <USART2_IRQHandler+0x38>
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <USART2_IRQHandler+0x74>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d002      	beq.n	8000a1c <USART2_IRQHandler+0x38>
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <USART2_IRQHandler+0x74>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	4798      	blx	r3
	if(USART2->SR & (1<<7)) { if(Global_I_UART[1].P_IRQ_CallBack_TXE != NULL)  Global_I_UART[1].P_IRQ_CallBack_TXE(); }
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <USART2_IRQHandler+0x70>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d006      	beq.n	8000a36 <USART2_IRQHandler+0x52>
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <USART2_IRQHandler+0x74>)
 8000a2a:	691b      	ldr	r3, [r3, #16]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <USART2_IRQHandler+0x52>
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <USART2_IRQHandler+0x74>)
 8000a32:	691b      	ldr	r3, [r3, #16]
 8000a34:	4798      	blx	r3
	if(USART2->SR & (1<<0)) {  if(Global_I_UART[1].P_IRQ_CallBack_TXE != NULL) Global_I_UART[1].P_IRQ_CallBack_PE(); }
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <USART2_IRQHandler+0x70>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d006      	beq.n	8000a50 <USART2_IRQHandler+0x6c>
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <USART2_IRQHandler+0x74>)
 8000a44:	691b      	ldr	r3, [r3, #16]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d002      	beq.n	8000a50 <USART2_IRQHandler+0x6c>
 8000a4a:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <USART2_IRQHandler+0x74>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	4798      	blx	r3
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40004400 	.word	0x40004400
 8000a58:	20000038 	.word	0x20000038

08000a5c <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	if(USART3->SR & (1<<6)) { if(Global_I_UART[2].P_IRQ_CallBack_TC != NULL) Global_I_UART[2].P_IRQ_CallBack_TC(); }
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <USART3_IRQHandler+0x70>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d006      	beq.n	8000a7a <USART3_IRQHandler+0x1e>
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <USART3_IRQHandler+0x74>)
 8000a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d002      	beq.n	8000a7a <USART3_IRQHandler+0x1e>
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <USART3_IRQHandler+0x74>)
 8000a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a78:	4798      	blx	r3
	if(USART3->SR & (1<<5)) {  if(Global_I_UART[2].P_IRQ_CallBack_RXNE != NULL) Global_I_UART[2].P_IRQ_CallBack_RXNE(); }
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <USART3_IRQHandler+0x70>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f003 0320 	and.w	r3, r3, #32
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d006      	beq.n	8000a94 <USART3_IRQHandler+0x38>
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <USART3_IRQHandler+0x74>)
 8000a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <USART3_IRQHandler+0x38>
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <USART3_IRQHandler+0x74>)
 8000a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a92:	4798      	blx	r3
	if(USART3->SR & (1<<7)) { if(Global_I_UART[2].P_IRQ_CallBack_TXE != NULL)  Global_I_UART[2].P_IRQ_CallBack_TXE(); }
 8000a94:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <USART3_IRQHandler+0x70>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d006      	beq.n	8000aae <USART3_IRQHandler+0x52>
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <USART3_IRQHandler+0x74>)
 8000aa2:	6a1b      	ldr	r3, [r3, #32]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <USART3_IRQHandler+0x52>
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <USART3_IRQHandler+0x74>)
 8000aaa:	6a1b      	ldr	r3, [r3, #32]
 8000aac:	4798      	blx	r3
	if(USART3->SR & (1<<0)) {  if(Global_I_UART[2].P_IRQ_CallBack_TXE != NULL) Global_I_UART[2].P_IRQ_CallBack_PE(); }
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <USART3_IRQHandler+0x70>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d006      	beq.n	8000ac8 <USART3_IRQHandler+0x6c>
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <USART3_IRQHandler+0x74>)
 8000abc:	6a1b      	ldr	r3, [r3, #32]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d002      	beq.n	8000ac8 <USART3_IRQHandler+0x6c>
 8000ac2:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <USART3_IRQHandler+0x74>)
 8000ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac6:	4798      	blx	r3
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40004800 	.word	0x40004800
 8000ad0:	20000038 	.word	0x20000038

08000ad4 <clock_init>:
#include "lcd.h"
#include "EXTI.h"
#include "usart.h"

void clock_init()
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
	//Bit 2 IOPAEN: I/O port A clock enable
		RCC_GPIOA_CLK_EN();
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <clock_init+0x30>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <clock_init+0x30>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	6193      	str	r3, [r2, #24]
	//Bit 3 IOPBEN: I/O port B clock enable
		RCC_GPIOB_CLK_EN();
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <clock_init+0x30>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <clock_init+0x30>)
 8000aea:	f043 0308 	orr.w	r3, r3, #8
 8000aee:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <clock_init+0x30>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a03      	ldr	r2, [pc, #12]	; (8000b04 <clock_init+0x30>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6193      	str	r3, [r2, #24]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	40021000 	.word	0x40021000

08000b08 <UART_IRQ_Callback>:
}

uint16_t ch;

void UART_IRQ_Callback(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	MCAL_UART_RecieveData(USART1, &ch, disable);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4905      	ldr	r1, [pc, #20]	; (8000b24 <UART_IRQ_Callback+0x1c>)
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <UART_IRQ_Callback+0x20>)
 8000b12:	f7ff fefd 	bl	8000910 <MCAL_UART_RecieveData>
	MCAL_UART_SendData(USART1, &ch, enable);
 8000b16:	2200      	movs	r2, #0
 8000b18:	4902      	ldr	r1, [pc, #8]	; (8000b24 <UART_IRQ_Callback+0x1c>)
 8000b1a:	4803      	ldr	r0, [pc, #12]	; (8000b28 <UART_IRQ_Callback+0x20>)
 8000b1c:	f7ff fedc 	bl	80008d8 <MCAL_UART_SendData>
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200000a4 	.word	0x200000a4
 8000b28:	40013800 	.word	0x40013800

08000b2c <main>:

int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
	clock_init();
 8000b32:	f7ff ffcf 	bl	8000ad4 <clock_init>
	UART_Config uartCFG;
	uartCFG.IRQ_CallBack = Default_IRQ_Cfg;
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
	uartCFG.BaudRate = USART_BaudRate_115200;
 8000b44:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b48:	607b      	str	r3, [r7, #4]
	uartCFG.HWFlowCTRL = UART_HWFlowCTRL_NONE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	72fb      	strb	r3, [r7, #11]
	uartCFG.IRQ_Enable = USART_IRQ_Enable;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	733b      	strb	r3, [r7, #12]
	uartCFG.IRQ_CallBack.P_IRQ_CallBack_RXNE = UART_IRQ_Callback;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <main+0x4c>)
 8000b54:	61bb      	str	r3, [r7, #24]
	uartCFG.Parity = UART_Parity_NONE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	727b      	strb	r3, [r7, #9]
	uartCFG.Payload_Length = UART_Payload_Length_8B;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	723b      	strb	r3, [r7, #8]
	uartCFG.StopBits = UART_StopBits__1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	72bb      	strb	r3, [r7, #10]
	uartCFG.USART_Mode = UART_Mode_TX_RX;
 8000b62:	230c      	movs	r3, #12
 8000b64:	703b      	strb	r3, [r7, #0]

	MCAL_UART_Init(USART1, &uartCFG);
 8000b66:	463b      	mov	r3, r7
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4804      	ldr	r0, [pc, #16]	; (8000b7c <main+0x50>)
 8000b6c:	f7ff fd4c 	bl	8000608 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <main+0x50>)
 8000b72:	f7ff fe45 	bl	8000800 <MCAL_UART_GPIO_Set_Pins>
	//GPIO_init();
	while(1)
 8000b76:	e7fe      	b.n	8000b76 <main+0x4a>
 8000b78:	08000b09 	.word	0x08000b09
 8000b7c:	40013800 	.word	0x40013800

08000b80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b82:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b84:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8a:	490d      	ldr	r1, [pc, #52]	; (8000bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <LoopForever+0xe>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	; (8000bcc <LoopForever+0x16>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bae:	f000 f811 	bl	8000bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb2:	f7ff ffbb 	bl	8000b2c <main>

08000bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb6:	e7fe      	b.n	8000bb6 <LoopForever>
  ldr   r0, =_estack
 8000bb8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000bc4:	08000c3c 	.word	0x08000c3c
  ldr r2, =_sbss
 8000bc8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000bcc:	200000a8 	.word	0x200000a8

08000bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_2_IRQHandler>
	...

08000bd4 <__libc_init_array>:
 8000bd4:	b570      	push	{r4, r5, r6, lr}
 8000bd6:	2500      	movs	r5, #0
 8000bd8:	4e0c      	ldr	r6, [pc, #48]	; (8000c0c <__libc_init_array+0x38>)
 8000bda:	4c0d      	ldr	r4, [pc, #52]	; (8000c10 <__libc_init_array+0x3c>)
 8000bdc:	1ba4      	subs	r4, r4, r6
 8000bde:	10a4      	asrs	r4, r4, #2
 8000be0:	42a5      	cmp	r5, r4
 8000be2:	d109      	bne.n	8000bf8 <__libc_init_array+0x24>
 8000be4:	f000 f81a 	bl	8000c1c <_init>
 8000be8:	2500      	movs	r5, #0
 8000bea:	4e0a      	ldr	r6, [pc, #40]	; (8000c14 <__libc_init_array+0x40>)
 8000bec:	4c0a      	ldr	r4, [pc, #40]	; (8000c18 <__libc_init_array+0x44>)
 8000bee:	1ba4      	subs	r4, r4, r6
 8000bf0:	10a4      	asrs	r4, r4, #2
 8000bf2:	42a5      	cmp	r5, r4
 8000bf4:	d105      	bne.n	8000c02 <__libc_init_array+0x2e>
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bfc:	4798      	blx	r3
 8000bfe:	3501      	adds	r5, #1
 8000c00:	e7ee      	b.n	8000be0 <__libc_init_array+0xc>
 8000c02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c06:	4798      	blx	r3
 8000c08:	3501      	adds	r5, #1
 8000c0a:	e7f2      	b.n	8000bf2 <__libc_init_array+0x1e>
 8000c0c:	08000c34 	.word	0x08000c34
 8000c10:	08000c34 	.word	0x08000c34
 8000c14:	08000c34 	.word	0x08000c34
 8000c18:	08000c38 	.word	0x08000c38

08000c1c <_init>:
 8000c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c1e:	bf00      	nop
 8000c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c22:	bc08      	pop	{r3}
 8000c24:	469e      	mov	lr, r3
 8000c26:	4770      	bx	lr

08000c28 <_fini>:
 8000c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2a:	bf00      	nop
 8000c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c2e:	bc08      	pop	{r3}
 8000c30:	469e      	mov	lr, r3
 8000c32:	4770      	bx	lr
